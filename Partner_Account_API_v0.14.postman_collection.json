{
	"info": {
		"_postman_id": "8be0a447-261b-485f-830e-7b60de0d7bff",
		"name": "Partner_Account_API_v0.14",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12409896"
	},
	"item": [
		{
			"name": "get access token Acquirer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.environment.set(\"access_token\", jsonData.accessToken);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(\"Starting to test the Acquirer jouney to manage the submerchant\");",
							"",
							"pm.environment.set(\"successCount\", 0);",
							"pm.environment.set(\"totalCount\", 0);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Api-Version",
						"value": "0.12"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "client_id",
							"value": "{{client_id}}",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "{{client_secret}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{api_base_url}}/oauth2/token",
					"host": [
						"{{api_base_url}}"
					],
					"path": [
						"oauth2",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Underlying Merchant",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"    function computeHttpSignature(config, headerHash) {",
							"      var template = 'keyId=\"${keyId}\",algorithm=\"${algorithm}\",headers=\"${headers}\",signature=\"${signature}\"',",
							"          sig = template;",
							"    ",
							"      // compute sig here",
							"      var signingBase = '';",
							"      config.headers.forEach(function(h){",
							"        if (signingBase !== '') {",
							"            signingBase += '\\n';",
							"            ",
							"        }",
							"        signingBase += h.toLowerCase() + \": \" + headerHash[h];",
							"      });",
							"    ",
							"      var hashf = (function() {",
							"          switch (config.algorithm) {",
							"            case 'hmac-sha1': return CryptoJS.HmacSHA1;",
							"            case 'hmac-sha256': return CryptoJS.HmacSHA256;",
							"            case 'hmac-sha512': return CryptoJS.HmacSHA512;",
							"            default : return null;",
							"          }",
							"        }());",
							"    ",
							"      var hash = hashf(signingBase, config.secretkey);",
							"      var signatureOptions = {",
							"            keyId : config.keyId,",
							"            algorithm: config.algorithm,",
							"            headers: config.headers,",
							"            signature : CryptoJS.enc.Base64.stringify(hash)",
							"          };",
							"    ",
							"      // build sig string here",
							"      Object.keys(signatureOptions).forEach(function(key) {",
							"        var pattern = \"${\" + key + \"}\",",
							"            value = (typeof signatureOptions[key] != 'string') ? signatureOptions[key].join(' ') : signatureOptions[key];",
							"        sig = sig.replace(pattern, value);",
							"      });",
							"    ",
							"      return sig;",
							"    }",
							"    ",
							"    var targetUrl = request.url.replace(\"{{api_base_url}}\",\"\");",
							"    var method = request.method.toLowerCase();",
							"    var bodyData = request.data;",
							"",
							"    var sha256digest = CryptoJS.SHA256(bodyData);",
							"    var base64sha256 = CryptoJS.enc.Base64.stringify(sha256digest);",
							"    var computedDigest = 'SHA-256=' + base64sha256;",
							"    ",
							"    var headerHash = {",
							"          'Request-Date-Time' : environment['utc_now'],",
							"          'Api-Version': '0.14',",
							"          'Trace-Id': environment['trace_id'],",
							"          'Authorization': 'Bearer ' + environment['access_token'],",
							"          'Digest' : computedDigest,",
							"          '(request-target)' : method + ' ' + targetUrl",
							"        };",
							"    ",
							"    var config = {",
							"          algorithm : 'hmac-sha256',",
							"          keyId : environment['signing_key_id'],",
							"          secretkey : CryptoJS.enc.Base64.parse(environment['signing_key']),",
							"          headers : ['(request-target)', 'Api-Version', 'Request-Date-Time', 'Trace-Id', 'Authorization', 'Digest']",
							"        };",
							"    ",
							"    pm.environment.set('signature', computeHttpSignature(config, headerHash));",
							"    pm.environment.set('digest', computedDigest);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.environment.set(\"merchantId\", jsonData.merchantId);",
							"",
							"",
							"pm.test(\"Post Create Sub Merchant\"",
							"    , function () {",
							"        pm.response.to.have.status(201);",
							"        pm.environment.set(\"successCount\", pm.environment.get(\"successCount\") + 1);",
							"    }",
							");",
							"pm.environment.set(\"totalCount\", pm.environment.get(\"totalCount\") + 1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Api-Version",
						"value": "0.14",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept-Language",
						"value": "en-US",
						"type": "text"
					},
					{
						"key": "Trace-Id",
						"value": "{{trace_id}}",
						"type": "text"
					},
					{
						"key": "Request-Date-Time",
						"value": "{{utc_now}}",
						"type": "text"
					},
					{
						"key": "Signature",
						"value": "{{signature}}",
						"type": "text"
					},
					{
						"key": "Digest",
						"value": "{{digest}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \"businessEmail\": \"paymebiz@sandbox.hsbc.com.hk\",\r\n \"brNumber\": \"36845210\",\r\n \"crNumber\": \"87654321\",\r\n \"corpTypeCode\": \"010\",\r\n \"businessName\": \"PayMe Smart Sandbox Limited\",\r\n \"displayName\": \"PayMe Sandbox Test Merchant\",\r\n \"businessAddress\": \"123 Abc road, Hong Kong\",\r\n \"merchantCategoryCode\": \"7372\",\r\n \"userPhone\": \"+85266661766\",\r\n \"userEmail\": \"paymebiz-finance@sandbox.hsbc.com.hk\",\r\n \"storeId\": \"001-CWB\",\r\n \"businessLogo\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_base_url}}/sub-merchants/merchant",
					"host": [
						"{{api_base_url}}"
					],
					"path": [
						"sub-merchants",
						"merchant"
					]
				},
				"description": "API to onboard an Acquirer underlying merchant to Acquirer platform . Used by Acquirer Merchant"
			},
			"response": []
		},
		{
			"name": "Underlying Merchant Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Get Underlying Merchant Details\"\r",
							"    , function () {\r",
							"        pm.response.to.have.status(200);\r",
							"        pm.expect(jsonData.merchantId).to.eq(pm.environment.get(\"merchantId\"));\r",
							"        pm.environment.set(\"successCount\", pm.environment.get(\"successCount\") + 1);\r",
							"    }\r",
							");\r",
							"pm.environment.set(\"totalCount\", pm.environment.get(\"totalCount\") + 1);\r",
							"\r",
							"console.log(pm.environment.get(\"successCount\"));\r",
							"console.log(pm.environment.get(\"totalCount\"));\r",
							"console.log(\"Completed the test of Acquirer jouney to manage the submerchant. Total Tests: \" + pm.environment.get(\"totalCount\") + \" Success: \" + pm.environment.get(\"successCount\"));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function computeHttpSignature(config, headerHash) {",
							"  var template = 'keyId=\"${keyId}\",algorithm=\"${algorithm}\",headers=\"${headers}\",signature=\"${signature}\"',",
							"    sig = template;",
							"",
							"  // compute sig here",
							"  var signingBase = '';",
							"  config.headers.forEach(function (h) {",
							"    if (signingBase !== '') {",
							"      signingBase += '\\n';",
							"",
							"    }",
							"    signingBase += h.toLowerCase() + \": \" + headerHash[h];",
							"  });",
							"",
							"  var hashf = (function () {",
							"    switch (config.algorithm) {",
							"      case 'hmac-sha1': return CryptoJS.HmacSHA1;",
							"      case 'hmac-sha256': return CryptoJS.HmacSHA256;",
							"      case 'hmac-sha512': return CryptoJS.HmacSHA512;",
							"      default: return null;",
							"    }",
							"  }());",
							"",
							"  var hash = hashf(signingBase, config.secretkey);",
							"  var signatureOptions = {",
							"    keyId: config.keyId,",
							"    algorithm: config.algorithm,",
							"    headers: config.headers,",
							"    signature: CryptoJS.enc.Base64.stringify(hash)",
							"  };",
							"",
							"  // build sig string here",
							"  Object.keys(signatureOptions).forEach(function (key) {",
							"    var pattern = \"${\" + key + \"}\",",
							"      value = (typeof signatureOptions[key] != 'string') ? signatureOptions[key].join(' ') : signatureOptions[key];",
							"    sig = sig.replace(pattern, value);",
							"  });",
							"",
							"  return sig;",
							"}",
							"",
							"var targetUrl = request.url.replace(\"{{api_base_url}}\",\"\").replace(\"{{merchantId}}\",environment['merchantId']);",
							"",
							"var method = request.method.toLowerCase();",
							"var sha256digest = CryptoJS.SHA256(request.data);",
							"var base64sha256 = CryptoJS.enc.Base64.stringify(sha256digest);",
							"var computedDigest = 'sha-256=' + base64sha256;",
							"var content_length = JSON.stringify(request.data).length;",
							"",
							"var headerHash = {",
							"  'Request-Date-Time': environment['utc_now'],",
							"  'Api-Version': '0.14',",
							"  'Trace-Id': environment['trace_id'],",
							"  'Authorization': 'Bearer ' + environment['access_token'],",
							"  '(request-target)': method + ' ' + targetUrl",
							"};",
							"",
							"var config = {",
							"  algorithm: 'hmac-sha256',",
							"  keyId: environment['signing_key_id_acq'],",
							"  secretkey: CryptoJS.enc.Base64.parse(environment['signing_key_acq']),",
							"  headers: ['(request-target)', 'Api-Version', 'Request-Date-Time', 'Trace-Id', 'Authorization']",
							"};",
							"",
							"pm.environment.set('signature', computeHttpSignature(config, headerHash));",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Api-Version",
						"value": "0.14",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept-Language",
						"value": "en-US",
						"type": "text"
					},
					{
						"key": "Trace-Id",
						"value": "{{trace_id}}",
						"type": "text"
					},
					{
						"key": "Request-Date-Time",
						"value": "{{utc_now}}",
						"type": "text"
					},
					{
						"key": "Signature",
						"value": "{{signature}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{api_base_url}}/sub-merchants/merchant/{{merchantId}}",
					"host": [
						"{{api_base_url}}"
					],
					"path": [
						"sub-merchants",
						"merchant",
						"{{merchantId}}"
					]
				},
				"description": "API to get the information about the underlying merchant."
			},
			"response": []
		},
		{
			"name": "List Underlying Merchants",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"Get Underlying Merchant Details\"\r",
							"    , function () {\r",
							"        pm.response.to.have.status(200);\r",
							"        pm.expect(jsonData.merchantId).to.eq(pm.environment.get(\"merchantId\"));\r",
							"        pm.environment.set(\"successCount\", pm.environment.get(\"successCount\") + 1);\r",
							"    }\r",
							");\r",
							"pm.environment.set(\"totalCount\", pm.environment.get(\"totalCount\") + 1);\r",
							"\r",
							"console.log(pm.environment.get(\"successCount\"));\r",
							"console.log(pm.environment.get(\"totalCount\"));\r",
							"console.log(\"Completed the test of Acquirer jouney to manage the submerchant. Total Tests: \" + pm.environment.get(\"totalCount\") + \" Success: \" + pm.environment.get(\"successCount\"));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function computeHttpSignature(config, headerHash) {",
							"  var template = 'keyId=\"${keyId}\",algorithm=\"${algorithm}\",headers=\"${headers}\",signature=\"${signature}\"',",
							"    sig = template;",
							"",
							"  // compute sig here",
							"  var signingBase = '';",
							"  config.headers.forEach(function (h) {",
							"    if (signingBase !== '') {",
							"      signingBase += '\\n';",
							"",
							"    }",
							"    signingBase += h.toLowerCase() + \": \" + headerHash[h];",
							"  });",
							"",
							"  var hashf = (function () {",
							"    switch (config.algorithm) {",
							"      case 'hmac-sha1': return CryptoJS.HmacSHA1;",
							"      case 'hmac-sha256': return CryptoJS.HmacSHA256;",
							"      case 'hmac-sha512': return CryptoJS.HmacSHA512;",
							"      default: return null;",
							"    }",
							"  }());",
							"",
							"  var hash = hashf(signingBase, config.secretkey);",
							"  var signatureOptions = {",
							"    keyId: config.keyId,",
							"    algorithm: config.algorithm,",
							"    headers: config.headers,",
							"    signature: CryptoJS.enc.Base64.stringify(hash)",
							"  };",
							"",
							"  // build sig string here",
							"  Object.keys(signatureOptions).forEach(function (key) {",
							"    var pattern = \"${\" + key + \"}\",",
							"      value = (typeof signatureOptions[key] != 'string') ? signatureOptions[key].join(' ') : signatureOptions[key];",
							"    sig = sig.replace(pattern, value);",
							"  });",
							"",
							"  return sig;",
							"}",
							"",
							"var targetUrl = request.url.replace(\"{{api_base_url}}\",\"\");",
							"",
							"var method = request.method.toLowerCase();",
							"var sha256digest = CryptoJS.SHA256(request.data);",
							"var base64sha256 = CryptoJS.enc.Base64.stringify(sha256digest);",
							"var computedDigest = 'sha-256=' + base64sha256;",
							"var content_length = JSON.stringify(request.data).length;",
							"",
							"var headerHash = {",
							"  'Request-Date-Time': environment['utc_now'],",
							"  'Api-Version': '0.14',",
							"  'Trace-Id': environment['trace_id'],",
							"  'Authorization': 'Bearer ' + environment['access_token'],",
							"  '(request-target)': method + ' ' + targetUrl",
							"};",
							"",
							"var config = {",
							"  algorithm: 'hmac-sha256',",
							"  keyId: environment['signing_key_id_acq'],",
							"  secretkey: CryptoJS.enc.Base64.parse(environment['signing_key_acq']),",
							"  headers: ['(request-target)', 'Api-Version', 'Request-Date-Time', 'Trace-Id', 'Authorization']",
							"};",
							"",
							"pm.environment.set('signature', computeHttpSignature(config, headerHash));",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Api-Version",
						"value": "0.14",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept-Language",
						"value": "en-US",
						"type": "text"
					},
					{
						"key": "Trace-Id",
						"value": "{{trace_id}}",
						"type": "text"
					},
					{
						"key": "Request-Date-Time",
						"value": "{{utc_now}}",
						"type": "text"
					},
					{
						"key": "Signature",
						"value": "{{signature}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{api_base_url}}/sub-merchants/merchant",
					"host": [
						"{{api_base_url}}"
					],
					"path": [
						"sub-merchants",
						"merchant"
					]
				},
				"description": "API to get the information about the underlying merchant."
			},
			"response": []
		},
		{
			"name": "Update Underlying Merchant",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function computeHttpSignature(config, headerHash) {",
							"  var template = 'keyId=\"${keyId}\",algorithm=\"${algorithm}\",headers=\"${headers}\", signature=\"${signature}\"',",
							"      sig = template;",
							"",
							"  // compute sig here",
							"  var signingBase = '';",
							"  config.headers.forEach(function(h){",
							"    if (signingBase !== '') {",
							"        signingBase += '\\n';",
							"        ",
							"    }",
							"    signingBase += h.toLowerCase() + \": \" + headerHash[h];",
							"  });",
							"",
							"  var hashf = (function() {",
							"      switch (config.algorithm) {",
							"        case 'hmac-sha1': return CryptoJS.HmacSHA1;",
							"        case 'hmac-sha256': return CryptoJS.HmacSHA256;",
							"        case 'hmac-sha512': return CryptoJS.HmacSHA512;",
							"        default : return null;",
							"      }",
							"    }());",
							"",
							"  var hash = hashf(signingBase, config.secretkey);",
							"  var signatureOptions = {",
							"        keyId : config.keyId,",
							"        algorithm: config.algorithm,",
							"        headers: config.headers,",
							"        signature : CryptoJS.enc.Base64.stringify(hash)",
							"      };",
							"",
							"  // build sig string here",
							"  Object.keys(signatureOptions).forEach(function(key) {",
							"    var pattern = \"${\" + key + \"}\",",
							"        value = (typeof signatureOptions[key] != 'string') ? signatureOptions[key].join(' ') : signatureOptions[key];",
							"    sig = sig.replace(pattern, value);",
							"  });",
							"",
							"  return sig;",
							"}",
							"    ",
							"var targetUrl = request.url.replace(\"{{api_base_url}}\",\"\").replace(\"{{merchantId}}\",environment['merchantId']);",
							"",
							"var method = request.method.toLowerCase();",
							"var bodyData = request.data;",
							"",
							"var sha256digest = CryptoJS.SHA256(bodyData);",
							"var base64sha256 = CryptoJS.enc.Base64.stringify(sha256digest);",
							"var computedDigest = 'SHA-256=' + base64sha256;",
							"console.log(\"bodyData\" + bodyData);",
							"var content_length =  JSON.stringify(bodyData).length;",
							"",
							"var headerHash = {",
							"      'Request-Date-Time' : environment['utc_now'],",
							"      'Api-Version': '0.14',",
							"      'Trace-Id': environment['trace_id'],",
							"      'Authorization': 'Bearer ' + environment['access_token'],",
							"      'Digest' : computedDigest,",
							"      '(request-target)' : method + ' ' + targetUrl",
							"    };",
							"",
							"var config = {",
							"      algorithm : 'hmac-sha256',",
							"      keyId : environment['signing_key_id_acq'],",
							"      secretkey : CryptoJS.enc.Base64.parse(environment['signing_key_acq']),",
							"      headers : ['(request-target)', 'Api-Version', 'Request-Date-Time', 'Trace-Id', 'Authorization', 'Digest']",
							"    };",
							"",
							"pm.environment.set('signature', computeHttpSignature(config, headerHash));",
							"pm.environment.set('digest', computedDigest);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"PATCH Update Sub Merchant\"\r",
							"    , function () {\r",
							"        pm.response.to.have.status(200);\r",
							"        pm.environment.set(\"successCount\", pm.environment.get(\"successCount\") + 1);\r",
							"    }\r",
							");\r",
							"pm.environment.set(\"totalCount\", pm.environment.get(\"totalCount\") + 1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Api-Version",
						"value": "0.14",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept-Language",
						"value": "en-US",
						"type": "text"
					},
					{
						"key": "Trace-Id",
						"value": "{{trace_id}}",
						"type": "text"
					},
					{
						"key": "Request-Date-Time",
						"value": "{{utc_now}}",
						"type": "text"
					},
					{
						"key": "Signature",
						"value": "{{signature}}",
						"type": "text"
					},
					{
						"key": "Digest",
						"value": "{{digest}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"businessName\": \"PayMe Smart Sandbox Ltd\",\r\n  \"displayName\":  \"PayMe Sandbox Merchant Testing\",\r\n  \"businessAddress\": \"123 Abc road, Kowloon, Hong Kong\",\r\n  \"merchantCategoryCode\": \"7371\",\r\n  \"userPhone\": \"+85266666666\",\r\n  \"userEmail\": \"paymebiz-finance-new@sandbox.hsbc.com.hk\",\r\n  \"businessLogo\": \"\"\r\n}"
				},
				"url": {
					"raw": "{{api_base_url}}/sub-merchants/merchant/{{merchantId}}",
					"host": [
						"{{api_base_url}}"
					],
					"path": [
						"sub-merchants",
						"merchant",
						"{{merchantId}}"
					]
				},
				"description": "API to update merchant details."
			},
			"response": []
		},
		{
			"name": "Disconnect the Underlying Merchant",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"\r",
							"pm.test(\"DELETE Disconnect the underlying merchant\"\r",
							"    , function () {\r",
							"        pm.response.to.have.status(200);\r",
							"        pm.environment.set(\"successCount\", pm.environment.get(\"successCount\") + 1);\r",
							"    }\r",
							");\r",
							"pm.environment.set(\"totalCount\", pm.environment.get(\"totalCount\") + 1);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function computeHttpSignature(config, headerHash) {\r",
							"  var template = 'keyId=\"${keyId}\",algorithm=\"${algorithm}\",headers=\"${headers}\", signature=\"${signature}\"',\r",
							"      sig = template;\r",
							"\r",
							"  // compute sig here\r",
							"  var signingBase = '';\r",
							"  config.headers.forEach(function(h){\r",
							"    if (signingBase !== '') {\r",
							"        signingBase += '\\n';\r",
							"        \r",
							"    }\r",
							"    signingBase += h.toLowerCase() + \": \" + headerHash[h];\r",
							"  });\r",
							"\r",
							"  var hashf = (function() {\r",
							"      switch (config.algorithm) {\r",
							"        case 'hmac-sha1': return CryptoJS.HmacSHA1;\r",
							"        case 'hmac-sha256': return CryptoJS.HmacSHA256;\r",
							"        case 'hmac-sha512': return CryptoJS.HmacSHA512;\r",
							"        default : return null;\r",
							"      }\r",
							"    }());\r",
							"\r",
							"  var hash = hashf(signingBase, config.secretkey);\r",
							"  var signatureOptions = {\r",
							"        keyId : config.keyId,\r",
							"        algorithm: config.algorithm,\r",
							"        headers: config.headers,\r",
							"        signature : CryptoJS.enc.Base64.stringify(hash)\r",
							"      };\r",
							"\r",
							"  // build sig string here\r",
							"  Object.keys(signatureOptions).forEach(function(key) {\r",
							"    var pattern = \"${\" + key + \"}\",\r",
							"        value = (typeof signatureOptions[key] != 'string') ? signatureOptions[key].join(' ') : signatureOptions[key];\r",
							"    sig = sig.replace(pattern, value);\r",
							"  });\r",
							"\r",
							"  return sig;\r",
							"}\r",
							"    \r",
							"var targetUrl = request.url.replace(\"{{api_base_url}}\",\"\").replace(\"{{merchantId}}\",environment['merchantId']);\r",
							"\r",
							"var method = request.method.toLowerCase();\r",
							"var bodyData = request.data;\r",
							"\r",
							"var sha256digest = CryptoJS.SHA256(bodyData);\r",
							"var base64sha256 = CryptoJS.enc.Base64.stringify(sha256digest);\r",
							"var computedDigest = 'SHA-256=' + base64sha256;\r",
							"console.log(\"bodyData\" + bodyData);\r",
							"var content_length =  JSON.stringify(bodyData).length;\r",
							"\r",
							"var headerHash = {\r",
							"      'Request-Date-Time' : environment['utc_now'],\r",
							"      'Api-Version': '0.14',\r",
							"      'Trace-Id': environment['trace_id'],\r",
							"      'Authorization': 'Bearer ' + environment['access_token'],\r",
							"      'Digest' : computedDigest,\r",
							"      '(request-target)' : method + ' ' + targetUrl\r",
							"    };\r",
							"\r",
							"var config = {\r",
							"      algorithm : 'hmac-sha256',\r",
							"      keyId : environment['signing_key_id_acq'],\r",
							"      secretkey : CryptoJS.enc.Base64.parse(environment['signing_key_acq']),\r",
							"      headers : ['(request-target)', 'Api-Version', 'Request-Date-Time', 'Trace-Id', 'Authorization', 'Digest']\r",
							"    };\r",
							"\r",
							"pm.environment.set('signature', computeHttpSignature(config, headerHash));\r",
							"pm.environment.set('digest', computedDigest);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Api-Version",
						"value": "0.14",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept-Language",
						"value": "en-US",
						"type": "text"
					},
					{
						"key": "Trace-Id",
						"value": "{{trace_id}}",
						"type": "text"
					},
					{
						"key": "Request-Date-Time",
						"value": "{{utc_now}}",
						"type": "text"
					},
					{
						"key": "Signature",
						"value": "{{signature}}",
						"type": "text"
					},
					{
						"key": "Digest",
						"value": "{{digest}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \n\t\"offboardReason\": \"The off-boarding reason\",\n\t\"reasonCode\": \"01\"\n}"
				},
				"url": {
					"raw": "{{api_base_url}}/sub-merchants/merchant/{{merchantId}}",
					"host": [
						"{{api_base_url}}"
					],
					"path": [
						"sub-merchants",
						"merchant",
						"{{merchantId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const moment = require('moment');",
					"const uuid = require('uuid')",
					"//pm.environment.set(\"utc_now\", moment().subtract(1, \"minutes\"));",
					"pm.environment.set(\"trace_id\", uuid());",
					"pm.environment.set(\"utc_now\", moment().add(10, \"seconds\"));"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}