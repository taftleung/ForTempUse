openapi: 3.0.0
info:
  version: 1.0-oas3
  title: API Specification for United Kingdom Cards and Alternate Payment Methods
  description: ''
servers:
  - url: https://ws-api-platform.business.hsbc.co.hk/glcm-mobilecoll-mcuk-ea-merchantservices-proxy/v1
    description: Production
  - url: https://ws-api-platform-pprd.business.hsbc.co.hk/glcm-mobilecoll-mcuk-ea-merchantservices-proxy/v1
    description: Sandbox
tags:
  - name: Orders
    description: |
      Create Orders and link them to ```Payments```. Order creation is the first and an important step as it helps you associate every payment with an order.
      
      Orders and payments can be created in one-go or seperately.
  - name: Payments
    description: |
      You can accept payments from your customers by integrating your website or app with Hosted Payment Page or Direct Payment which serves different payment methods.
      
      > #### **IMPORTANT NOTE:**
      >
      > #### Conditions may apply to the availability of each checkout solution and its associated payment options, please check with our support team for details.

      Please see the following checkout solutions:
      
      ### HOSTED PAYMENT
      
      ---
      * **Overview**
      
        The Hosted Payment Page (HPP) is a PCI DSS v3.2 compliant redirect solution, allowing you capture card data without having to worry about the PCI overhead associated with a traditional API integration.
        
      * **Supported Payment Options**
        * **Debit / Credit Cards** - Card Data is captured securely inside HPP
        * **Paypal** - Redirect to Paypal Checkout page
        * **WeChat Pay** - Payment QR Code will be displayed in a redirected page
        * **Test Pay** - A payment simulator available in Sandbox environment for testing purpose.
      
      * **Integration Methods**
        * **Full-Page Redirection**
            
          A full-page redirect will be performed. A pre-rendered auto-executable HTML submit form will be returned in response field ```PATH: $.response.payment.payment_method.hosted_payment.access_method.form_post```
            
          This is a sample: (escape character is removed)
            
          ```
          <script language="javascript">window.onload=function(){document.pay_form.submit();}</script>
          <form id="pay_form" name="pay_form" action="https://pay.sandbox.realexpayments.com/pay" method="post">
          <input name="TIMESTAMP" type="hidden" id="TIMESTAMP" value="20210723185955" />
          <input name="MERCHANT_ID" type="hidden" id="MERCHANT_ID" value="YourMerchantId" />
          <input name="ACCOUNT" type="hidden" id="ACCOUNT" value="internet" />
          /* More Input Fields Here... */
          </form>
          ```
        * **iFrame/WebView Optimization**
        
          You can render the payment form using your own embedded iFrame or WebView, or as a Lightbox. The HTML submit form is similar but with some additional input fields. It will be returned in response field ```PATH: $.response.payment.payment_method.hosted_payment.access_method.iframe_form_post```
          
        * **Pay by Link**
        
          A Payment URL link you can embed directly in your website, an SMS or an email. The link will be returned in response field ```PATH: $.response.payment.payment_method.hosted_payment.access_method.payment_link```
          
      ### DIRECT PAYMENT
      
      ---
      * **Overview**
      
        Payment will be processed simultaneously in an API call.
        
      * **Supported Payment Options**
        * **Apple Pay** - Card Data Encryption is handled by Apple.
        * **Google Pay** - Card Data Encryption is handled by Google.
        
      * **Integration Methods**
      
        **Step 1. Obtain a Payment Token** - Payment Token is a token provided by Apple or Google that merchant can use it to bind a particular customer's card detail stored securely in Apple's or Google's server. Please visit Apple Pay and Google Pay developer site to learn how to obtain a Payment Token by calling their APIs.
        
        ```
        /* A Payment Token example from Apple Pay */
        {"data":"Sk1pYr1MYT4SMEKLibAPF342LZy3GEZJzdOZ0LdMK55k3UN02GaAphr/w8YtU+Cr5TZzJgHdCUh/35aEz3ORJrheWRZKHVw0J+58f6eZBuIXOkeTbIS3a98cbYZKZNGqfkgm1LcVHhXmM98rgcW95vUwUqiMweaLgdc+R9uppEEeFBLwtpItUZbbxy1UBBaRX+ja5b4esBorZ9x9sOloVqFH9aSoBZV/ks0H+YZqk9B+8tJ4z9YtYX1Ho9B1A/KG0SW889/+JZ+aTVrGCKbzBXoV/+u3ze/J0A7wtz5VETfOqNiD6KZIpsQ4E/AMmfNYTNVYFsGcyYMPKEw+1iKQO5MEYMB0l0oK45gHs3NN2tNE+DXWrMOCgI1IMneoW6aAiOhgbt1DfzBFNRe4bm1EkoW5M14Vvuj5EQb6fDnRK38=","header":{"publicKeyHash":"ilecVF58bpB8qio67Y0Okg5Hl6eirw2Y1v1KUCsdVgQ=","ephemeralPublicKey":"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEybsedLDKO/lfI8I/Zd0usQFbxV2aEktcKeudAHB+xzduPRcQ8vdWQ0roHUgQQNRhR3zXnwJes20nP4bbb7US5w==","transactionId":"b794b93281e1fbd9a480e3f63031c40bca0308ec513c2681ed66fd29c3c1b325"},"version":"EC_v1"}
        ```
        
        ```
        /* A Payment Token example from Google Pay */
        {"signature":"MEUCIHI37nu9JakubEtif26PtEvw9lUC4kBZ+pfqZM0AIw7IAiEA9izE5MEBzZK8tjZ8fjjMzy/VAdVXfgPflLm8gNIlhfw\u003d","protocolVersion":"ECv1","signedMessage":"{\"encryptedMessage\":\"kWUA7N1qr1wOPZ4Suud+Md6M1L4Bmr4t3DH+pdKf0YaciJZuzK57kmmlj6MQC1DjH0dmvHKo+pRzP2bc/9L0m2hChbAZFilfTlvZn6d86tYv9ii/2BjPe9UEswAmZrjo3hcVRDaoP1Gid/XcjzkOpYeOb0WQWoI9jx4osPsQfoLtst9qseDH7q0rRO9x3PQGLriCyzFkasqTjxGp5gaKTdzS4Mob7RORmxGCXM5oqYeE+anx5ctOXnh2WVHXLiQSKvtlhKvzTbTnUkA6ddFhgYc0OflDbW9T7b6Pw8l67XtqSgvZgm8gO9v25PnBFPaSx2nojzb3Tc7l5wMTpkRZQG5qeJLGpRGTZC+YDF/tLuigGxwaz+aBklAWmL/NyiH9HMBdtuOWTWp9Ir2pMQrYEgFJOrqziXc6fiOxjOmszMhvMKrlOjqJPZfqSXrYyj4vIJASBEzy/EHke+lBEaA\\u003d\",\"ephemeralPublicKey\":\"BPMwpda0BSS5gNqs9csIzvqgqn1zQBvcKipZf+goeVExgUwfqDGggfmKFTsSQTs4qlWvl5SozieeRMZQcjubWRw\\u003d\",\"tag\":\"wGWbvZH6YDGZUm+oN8uhv7OwGeNVUaNKn74/hZB595c\\u003d\"}"}
        ```
        
        **Step 2. Process Payment** - Put the Payment Token in the corresponding API request message and HSBC Omni Collect will process the payment simultaneously as a typical card payment. A successful or a failed payment will be returned in the synchronous API response message.
  - name: Refunds
    description: |
      You can make full or partial refunds to customers. Only a settled payment can be refunded.
  - name: Webhooks
    description: |
      ### WHAT IS A WEBHOOK
      Webhooks (Web Callback, HTTP Push API or Reverse API) is one way one web application can send information to another application in real-time when a specific event happens.
      
      You can use HSBC Omni Collect Webhooks to receive notifications when a specific event occurs. When one of these events is triggered, we send an HTTP POST payload in encrypted JSON to the webhook's configured URL.
      
      ### SETUP
      Entity | Event | URL Set Up
      ---|---|---
      Payments | ```payment.captured``` ```payment.failed``` | Define in ```$.payment_method.hosted_payment.ur.notification``` when creating a ```payment``` resource 
      
      ### EXCEPTION HANDLING
      Every event that receives a non-2xx response is considered as an event delivery failure and retry mechanism will be triggered. Up to 4 retries will be triggered in every 2 minutes. Maximum 5 calls including the 1st attempt.
      
      ### IDEMPOTENCY
      There could be scenarios where your endpoint might receive the same webhook multiple times. This could happen as an expected behaviour such as the retry mechanism or any other exceptional behaviour such as network problem.
      
      To handle duplicate webhooks, we offer a unique webhook ID ```x-hsbc-webhook-id``` where you can find it in the HTTP header on every webhook.
paths:
  /orders:
    post:
      tags:
        - Orders
      summary: Create an Order
      description: |
        This endpoint creates an Order.
        
        To facilitate the checkout process of an e-commerce sale, this endpoint can offer a faster way to create ```Order``` and ```Payment``` in one-go by expanding the API operation to multiple entities. Please see the details as follows.
        
        Nevertheless, merchant can still choose to create ```Order``` and ```Payment``` separately which may fit more on some other use cases such as bill payment or bulk processing.
      parameters:
        - name: x-hsbc-profileid
          in: header
          required: true
          description: '[Profile ID]'
          schema:
            type: string
          example: 8b915a4f5b5047f091f210e2232b5ced  
        - name: x-hsbc-msg-encrypt-id
          in: header
          required: true
          description: '[Merchant ID]+[JWS ID]+[JWE ID]'
          schema:
            type: string
          example: 42298549900001+0001+0002
        - name: message_encrypt
          in: header
          required: false
          description: 'To indicate this API request is without message encryption. ***This header is only applicable in Sandbox environment.***'
          schema:
            type: string
          example: false
        - name: $expand
          in: query
          required: false
          description: >
            The ```$expand``` query option specifies the related resources to be included in line with the original resource.

            POST /orders?$expand=payment |

            ---|

            **Use Case:** Create objects ```Order``` and ```Payment``` in one go. This is recommended for easing the no. of API calls.
            
            
            **How-to:** Include ```Payment``` object in the request body.
            
            POST /orders |

            ---|

            **Use Case:** Only ```Order``` will be created. This gives the flexibility to link to a ```Payment``` object at a later time.
            
            
            **How-to:** Exclude ```Payment``` object in the request body. After an ```Order``` is created, link ```Order``` to ```Payment``` by **POST /orders/{id}/payment**.
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - payment
            uniqueItems: true
        - name: enable_payment_url
          in: query
          required: false
          description: >
            POST /orders?enable_payment_url=Y |
            
            ---|
            
            **Use Case:** Enable to return Payment URL Link in response message: ```PATH: $.response.order.payments[0].payment_method.hosted_payment.access_method.payment_link``` 
            
            
            **Note:** Default value is N. Suggest to enable only when you need it since generating a Payment URL link needs extra computing resource.
          schema:
            type: string
            enum:
              - Y
      requestBody:
        description: |
          ***Data Encryption*** *is enforced. API Schema intends to demonstrate the skeleton of the message payload only.*
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderInput'
            examples:
              Submit without Payment:
                value:
                  txn_reference: ORDER-1234QWER
                  account_name: internet
                  amount: 1000
                  currency: GBP
                  items:
                    - product_name: Product Item 1
                      product_id: A
                      unitAmt: 900
                      unit: 1
                      vat: 100
                      subAmt: 1000
                  metadata:
                    note_1: Customer is a VIP
                    note_2: In-store credit is used
              Submit with Hosted Payment:
                value:
                  txn_reference: ORDER-1234QWER
                  account_name: internet
                  amount: 1000
                  currency: GBP
                  items:
                    - product_name: Product Item 1
                      product_id: A
                      unitAmt: 900
                      unit: 1
                      vat: 100
                      subAmt: 1000
                  metadata:
                    note_1: Customer is a VIP
                    note_2: In-store credit is used
                  payment:
                    payment_method:
                      hosted_payment:
                        url_settings:
                          return_page: https://merchant.com/returnPage
                          notification: https://merchant.com/returnStatus
                        payment_option:
                          - cards
                          - paypal
                          - wechatpay
                        billing:
                          first_name: james
                          last_name: mason
                          email: james.mason@example.com
                          street1: Flat 123
                          street2: House 456
                          street3: Unit 4
                          city: Halifax
                          postal_code: W5 9HR
                          country: '826'
              Submit with Direct Payment:
                value:
                  txn_reference: ORDER-1234QWER
                  account_name: internet
                  amount: 1000
                  currency: GBP
                  items:
                    - product_name: Product Item 1
                      product_id: A
                      unitAmt: 900
                      unit: 1
                      vat: 100
                      subAmt: 1000
                  metadata:
                    note_1: Customer is a VIP
                    note_2: In-store credit is used
                  payment:
                    payment_method:
                      direct_payment:
                        payment_option: applepay
                        token: <payment token>
        required: true
      responses:
        '200':
          description: |
            Successful operation.
            
            ***Data Encryption*** *is enforced. API Schema intends to demonstrate the skeleton of the message payload only.*
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderOutput'
              examples:
                Submit without Payment:
                  value:
                    system:
                      messageId: 89817674-daOO-4883
                      returnCode: '200'
                      returnReason: Successful operation
                      sentTime: '2016-11-15T10:00:00.000Z'
                      responseTime: '2016-11-15T10:00:00.000Z'
                    response:
                      order:
                        id: ORDER-1234QWER
                        txn_reference: ORDER-1234QWER
                        created_at: '2021-06-11T12:10:25Z'
                        last_modified: null
                        account_name: internet
                        amount: 1000
                        currency: GBP
                        items:
                          - product_name: Product Item 1
                            product_id: A
                            unitAmt: 900
                            unit: 1
                            vat: 100
                            subAmt: 1000
                        metadata:
                          note_1: Customer is a VIP
                          note_2: In-store credit is used
                        links:
                          - href: /orders/@order_id
                            id:
                              order_id: ORDER-1234QWER
                            rel: self
                            method: GET
                          - href: /orders/@order_id/payment
                            id:
                              order_id: ORDER-1234QWER
                            rel: payment
                            method: POST
                Submit with Hosted Payment:
                  value:
                    system:
                      messageId: 89817674-daOO-4883
                      returnCode: '200'
                      returnReason: Successful operation
                      sentTime: '2016-11-15T10:00:00.000Z'
                      responseTime: '2016-11-15T10:00:00.000Z'
                    response:
                      order:
                        id: ORDER-1234QWER
                        txn_reference: ORDER-1234QWER
                        created_at: '2021-06-11T12:10:25Z'
                        last_modified: null
                        account_name: internet
                        amount: 1000
                        currency: GBP
                        items:
                          - product_name: Product Item 1
                            product_id: A
                            unitAmt: 900
                            unit: 1
                            vat: 100
                            subAmt: 1000
                        metadata:
                          note_1: Customer is a VIP
                          note_2: In-store credit is used
                        payments:
                          - id: PAYMENT-5678TYUI
                            pasref: null
                            created_at: '2021-06-11T12:10:25Z'
                            last_modified: null
                            amount: null
                            currency: null
                            status: initiated
                            payment_method:
                              hosted_payment:
                                access_method:
                                  form_post: <Encoded_Redirect_Submit_Form>
                                  iframe_form_post: <Encoded_Redirect_Submit_Form>
                                  payment_link: https://pay.sandbox.realexpayments.com/card.html?guid=f82dc878-4752-4d25-8c4b-7d48b3a863ec
                                url_settings:
                                  return_page: https://merchant.com/returnPage
                                  notification: https://merchant.com/returnStatus
                                payment_option: null
                                billing:
                                  first_name: james
                                  last_name: mason
                                  email: james.mason@example.com
                                  street1: Flat 123
                                  street2: House 456
                                  street3: Unit 4
                                  city: Halifax
                                  postal_code: W5 9HR
                                  country: '826'
                            metadata: null
                            links:
                              - href: /payments/@payment_id
                                id:
                                  payment_id: PAYMENT-5678TYUI
                                rel: self
                                method: GET
                              - href: /payments/@payment_id
                                id:
                                  payment_id: PAYMENT-5678TYUI
                                rel: update
                                method: PATCH
                        links:
                          - href: /orders/@order_id
                            id:
                              order_id: ORDER-1234QWER
                            rel: self
                            method: GET
                Submit with Direct Payment:
                  value:
                    system:
                      messageId: 89817674-daOO-4883
                      returnCode: '200'
                      returnReason: Successful operation
                      sentTime: '2016-11-15T10:00:00.000Z'
                      responseTime: '2016-11-15T10:00:00.000Z'
                    response:
                      order:
                        id: ORDER-1234QWER
                        txn_reference: ORDER-1234QWER
                        created_at: '2021-06-11T12:10:25Z'
                        last_modified: null
                        account_name: internet
                        amount: 1000
                        currency: GBP
                        items:
                          - product_name: Product Item 1
                            product_id: A
                            unitAmt: 900
                            unit: 1
                            vat: 100
                            subAmt: 1000
                        metadata:
                          note_1: Customer is a VIP
                          note_2: In-store credit is used
                        payments:
                          - id: '14627849160897986'
                            pasref: '14627849160897986'
                            created_at: '2021-06-11T14:10:25Z'
                            last_modified: null
                            amount: 1000
                            currency: GBP
                            status: pending
                            payment_method:
                              direct_payment:
                                payment_option: applepay
                                token: <payment token>
                                card:
                                  brand: VISA
                                  authcode: '12345'
                                  mcn: 401200******1112
                                  cvv_result: MATCHED
                                  dcc:
                                    amount: 1324
                                    currency: USD
                                    ccp: FEXCO
                                    fx_rate: 1.3244
                                    margin_percentage: 3.75
                            metadata: null
                            links:
                              - href: /payments/@payment_id
                                id:
                                  payment_id: '14627849160897986'
                                rel: self
                                method: GET
                              - href: /payments/@payment_id
                                id:
                                  payment_id: '14627849160897986'
                                rel: update
                                method: PATCH
                              - href: /payments/@payment_id/refund
                                id:
                                  payment_id: '14627849160897986'
                                rel: refund
                                method: POST
                        links:
                          - href: /orders/@order_id
                            id:
                              order_id: ORDER-1234QWER
                            rel: self
                            method: GET
        '400':
          description: Missing or invalid Parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
              example:
                system:
                  messageId: 89817674-daOO-4883
                  returnCode: '400'
                  returnReason: <Corresponding Error Message>
                  sentTime: '2016-11-15T10:00:00.000Z'
                  responseTime: '2016-11-15T10:00:00.000Z'
                response:
                  request_result:
                    api_gateway:
                      code: '999999'
                      message: System Error
                    payment_gateway:
                      code: '101'
                      message: Declined by Bank
        '403':
          description: Authorization credentials are missing or invalid.
        '404':
          description: Empty resource/resource not found.
        '500':
          description: The request failed due to an internal error.
      security:
        - basicAuth: []
  /orders/{id}:
    get:
      tags:
        - Orders
      summary: Retrieve a particular Order by ID
      description: |
        This endpoint retrieves the details of a particular Order.

        Retrieval of other related-objects such as Payment and Refund in one single action is possible by expanding the API operation to multiple entities. This can benefit merchant by reducing the number of API calls. However, it may hit performance issue if one particular Order associates a long list of Payments or Refunds, so please choose to use this feature wisely.
      parameters:
        - name: x-hsbc-profileid
          in: header
          required: true
          description: '[Profile ID]'
          schema:
            type: string
          example: 8b915a4f5b5047f091f210e2232b5ced  
        - name: x-hsbc-msg-encrypt-id
          in: header
          required: true
          description: '[Merchant ID]+[JWS ID]+[JWE ID]'
          schema:
            type: string    
          example: 42298549900001+0001+0002
        - name: message_encrypt
          in: header
          required: false
          description: 'To indicate this API request is without message encryption. ***This header is only applicable in Sandbox environment.***'
          schema:
            type: string
          example: false  
        - name: id
          in: path
          required: true
          description: |
            Unique ```id``` of ```order```

            ***Data Encryption*** *is enforced.*
          schema:
            type: string    
        - name: $expand
          in: query
          required: false
          description: >
            The ```$expand``` query option specifies the related resources to be included in line with the original resource.

            GET /orders/{id} |

            ---|

            Only ```Order``` will be returned in response, all other related-objects will be associated in ```links```
            
            GET /orders/{id}?$expand=payment |

            ---|

            ```Order``` and ```Payment``` will be returned in response, all other related-objects will be associated in ```links```
            
            GET /orders/{id}?$expand=payment/refund |

            ---|

            ```Order```, ```Payment``` and ```Refund``` will be returned in response
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - payment
                - refund
            uniqueItems: true
      responses:
        '200':
          description: |
            Successful operation.
            
            ***Data Encryption*** *is enforced. API Schema intends to demonstrate the skeleton of the message payload only.*
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderOutput'
              examples:
                Order only:
                  value:
                    system:
                      messageId: 89817674-daOO-4883
                      returnCode: '200'
                      returnReason: Successful operation
                      sentTime: '2016-11-15T10:00:00.000Z'
                      responseTime: '2016-11-15T10:00:00.000Z'
                    response:
                      order:
                        id: ORDER-1234QWER
                        txn_reference: ORDER-1234QWER
                        created_at: '2021-06-11T12:10:25Z'
                        last_modified: null
                        account_name: internet
                        amount: 1000
                        currency: GBP
                        items:
                          - product_name: Product Item 1
                            product_id: A
                            unitAmt: 900
                            unit: 1
                            vat: 100
                            subAmt: 1000
                        metadata:
                          note_1: Customer is a VIP
                          note_2: In-store credit is used
                        links:
                          - href: /payments/@payment_id
                            id:
                              payment_id: '14627849160897986'
                            rel: payment
                            method: GET
                Order + Payment:
                  value:
                    system:
                      messageId: 89817674-daOO-4883
                      returnCode: '200'
                      returnReason: Successful operation
                      sentTime: '2016-11-15T10:00:00.000Z'
                      responseTime: '2016-11-15T10:00:00.000Z'
                    response:
                      order:
                        id: ORDER-1234QWER
                        txn_reference: ORDER-1234QWER
                        created_at: '2021-06-11T12:10:25Z'
                        last_modified: null
                        account_name: internet
                        amount: 1000
                        currency: GBP
                        items:
                          - product_name: Product Item 1
                            product_id: prod-9ijn8uhb
                            unitAmt: 900
                            unit: 1
                            vat: 100
                            subAmt: 1000
                        metadata: null
                        payments:
                          - id: PAYMENT-5678TYUI
                            pasref: '14627849160897986'
                            created_at: '2021-06-11T14:10:25Z'
                            last_modified: '2021-06-12T14:10:25Z'
                            amount: 1000
                            currency: GBP
                            status: batched
                            payment_method:
                              hosted_payment:
                                access_method:
                                  form_post: <Encoded_Redirect_Submit_Form>
                                  iframe_form_post: <Encoded_Redirect_Submit_Form>
                                  payment_link: https://pay.sandbox.realexpayments.com/card.html?guid=f82dc878-4752-4d25-8c4b-7d48b3a863ec
                                url_settings:
                                  return_page: https://merchant.com/returnPage
                                  notification: https://merchant.com/returnStatus
                                payment_option: cards
                                billing:
                                  first_name: james
                                  last_name: mason
                                  email: james.mason@example.com
                                  street1: Flat 123
                                  street2: House 456
                                  street3: Unit 4
                                  city: Halifax
                                  postal_code: W5 9HR
                                  country: '826'
                                card:
                                  brand: VISA
                                  authcode: '12345'
                                  mcn: 401200******1112
                                  cvv_result: MATCHED
                                  dcc:
                                    amount: 1324
                                    currency: USD
                                    ccp: FEXCO
                                    fx_rate: 1.3244
                                    margin_percentage: 3.75
                            metadata: null
                            links:
                              - href: /payments/@payment_id
                                id:
                                  payment_id: PAYMENT-5678TYUI
                                rel: self
                                method: GET
                              - href: /payments/@payment_id
                                id:
                                  payment_id: PAYMENT-5678TYUI
                                rel: update
                                method: PATCH
                              - href: /refunds/@refund_id
                                id:
                                  refund_id: '16219383951512048'
                                rel: refund
                                method: GET
                              - href: /payments/@payment_id/refund
                                id:
                                  payment_id: PAYMENT-5678TYUI
                                rel: refund
                                method: POST
                        links: null
                Order + Payment + Refund:
                  value:
                    system:
                      messageId: 89817674-daOO-4883
                      returnCode: '200'
                      returnReason: Successful operation
                      sentTime: '2016-11-15T10:00:00.000Z'
                      responseTime: '2016-11-15T10:00:00.000Z'
                    response:
                      order:
                        id: ORDER-1234QWER
                        txn_reference: ORDER-1234QWER
                        created_at: '2021-06-11T12:10:25Z'
                        last_modified: null
                        account_name: internet
                        amount: 1000
                        currency: GBP
                        items:
                          - product_name: Product Item 1
                            product_id: prod-9ijn8uhb
                            unitAmt: 900
                            unit: 1
                            vat: 100
                            subAmt: 1000
                        metadata: null
                        payments:
                          - id: PAYMENT-5678TYUI
                            pasref: '14627849160897986'
                            created_at: '2021-06-11T14:10:25Z'
                            last_modified: '2021-06-12T14:10:25Z'
                            amount: 1000
                            currency: GBP
                            status: batched
                            payment_method:
                              hosted_payment:
                                access_method:
                                  form_post: <Encoded_Redirect_Submit_Form>
                                  iframe_form_post: <Encoded_Redirect_Submit_Form>
                                  payment_link: https://pay.sandbox.realexpayments.com/card.html?guid=f82dc878-4752-4d25-8c4b-7d48b3a863ec
                                url_settings:
                                  return_page: https://merchant.com/returnPage
                                  notification: https://merchant.com/returnStatus
                                payment_option: cards
                                billing:
                                  first_name: james
                                  last_name: mason
                                  email: james.mason@example.com
                                  street1: Flat 123
                                  street2: House 456
                                  street3: Unit 4
                                  city: Halifax
                                  postal_code: W5 9HR
                                  country: '826'
                                card:
                                  brand: VISA
                                  authcode: '12345'
                                  mcn: 401200******1112
                                  cvv_result: MATCHED
                                  dcc:
                                    amount: 1324
                                    currency: USD
                                    ccp: FEXCO
                                    fx_rate: 1.3244
                                    margin_percentage: 3.75
                            metadata: null
                            refunds:
                              - id: '16219383951512048'
                                pasref: '16219383951512048'
                                created_at: '2021-06-11T14:10:25Z'
                                last_modified: '2021-06-12T14:10:25Z'
                                amount: 1000
                                currency: GBP
                                status: pending
                                metadata: null
                                links:
                                  - href: /refunds/@refund_id
                                    id:
                                      refund_id: '16219383951512048'
                                    rel: self
                                    method: GET
                            links:
                              - href: /payments/@payment_id
                                id:
                                  payment_id: PAYMENT-5678TYUI
                                rel: self
                                method: GET
                              - href: /payments/@payment_id
                                id:
                                  payment_id: PAYMENT-5678TYUI
                                rel: update
                                method: PATCH
                              - href: /payments/@payment_id/refund
                                id:
                                  payment_id: PAYMENT-5678TYUI
                                rel: refund
                                method: POST
                        links: null
        '400':
          description: Missing or invalid Parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
              example:
                system:
                  messageId: 89817674-daOO-4883
                  returnCode: '400'
                  returnReason: <Corresponding Error Message>
                  sentTime: '2016-11-15T10:00:00.000Z'
                  responseTime: '2016-11-15T10:00:00.000Z'
                response:
                  request_result:
                    api_gateway:
                      code: '999999'
                      message: System Error
                    payment_gateway:
                      code: '101'
                      message: Declined by Bank  
        '403':
          description: Authorization credentials are missing or invalid.
        '404':
          description: Empty resource/resource not found.
        '500':
          description: The request failed due to an internal error.
      security:
        - basicAuth: []
  /orders/{id}/payment:
    post:
      tags:
        - Payments
      summary: Create a Payment for an Order
      description: |
        This endpoint creates a Payment which links to a specific Order.
      parameters:
        - name: x-hsbc-profileid
          in: header
          required: true
          description: '[Profile ID]'
          schema:
            type: string
          example: 8b915a4f5b5047f091f210e2232b5ced  
        - name: x-hsbc-msg-encrypt-id
          in: header
          required: true
          description: '[Merchant ID]+[JWS ID]+[JWE ID]'
          schema:
            type: string
          example: 42298549900001+0001+0002
        - name: message_encrypt
          in: header
          required: false
          description: 'To indicate this API request is without message encryption. ***This header is only applicable in Sandbox environment.***'
          schema:
            type: string
          example: false
        - name: id
          in: path
          required: true
          description: |
            Unique ```id``` of ```order```

            ***Data Encryption*** *is enforced.*
          schema:
            type: string  
        - name: enable_payment_url
          in: query
          required: false
          description: >
            POST /orders?enable_payment_url=Y |
            
            ---|
            
            **Use Case:** Enable to return Payment URL Link in response message: ```PATH: $.response.order.payments[0].payment_method.hosted_payment.access_method.payment_link``` 
            
            
            **Note:** Default value is N. Suggest to enable only when you need it since generating a Payment URL link needs extra computing resource.
          schema:
            type: string
            enum:
              - Y
      requestBody:
        description: |
          ***Data Encryption*** *is enforced. API Schema intends to demonstrate the skeleton of the message payload only.*
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentInput'
            examples:
              Submit with Hosted Payment:
                value:
                  payment_method:
                    hosted_payment:
                      url_settings:
                        return_page: https://merchant.com/returnPage
                        notification: https://merchant.com/returnStatus
                      payment_option:
                        - cards
                        - paypal
                        - wechatpay
                      billing:
                        first_name: james
                        last_name: mason
                        email: james.mason@example.com
                        street1: Flat 123
                        street2: House 456
                        street3: Unit 4
                        city: Halifax
                        postal_code: W5 9HR
                        country: '826'
              Submit with Direct Payment:
                value:
                  payment_method:
                    direct_payment:
                      payment_option: applepay
                      token: <payment token>
        required: true
      responses:
        '200':
          description: |
            Successful operation.
            
            ***Data Encryption*** *is enforced. API Schema intends to demonstrate the skeleton of the message payload only.*
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentOutput'
              examples:
                Submit with Hosted Payment:
                  value:
                    system:
                      messageId: 89817674-daOO-4883
                      returnCode: '200'
                      returnReason: Successful operation
                      sentTime: '2016-11-15T10:00:00.000Z'
                      responseTime: '2016-11-15T10:00:00.000Z'
                    response:
                      payment:
                        id: PAYMENT-5678TYUI
                        pasref: null
                        created_at: '2021-06-11T12:10:25Z'
                        last_modified: null
                        amount: null
                        currency: null
                        status: initiated
                        payment_method:
                          hosted_payment:
                            access_method:
                              form_post: <Encoded_Redirect_Submit_Form>
                              iframe_form_post: <Encoded_Redirect_Submit_Form>
                              payment_link: https://pay.sandbox.realexpayments.com/card.html?guid=f82dc878-4752-4d25-8c4b-7d48b3a863ec
                            url_settings:
                              return_page: https://merchant.com/returnPage
                              notification: https://merchant.com/returnStatus
                            payment_option: null
                            billing:
                              first_name: james
                              last_name: mason
                              email: james.mason@example.com
                              street1: Flat 123
                              street2: House 456
                              street3: Unit 4
                              city: Halifax
                              postal_code: W5 9HR
                              country: '826'
                        metadata: null
                        links:
                          - href: /payments/@payment_id
                            id:
                              payment_id: PAYMENT-5678TYUI
                            rel: self
                            method: GET
                          - href: /payments/@payment_id
                            id:
                              payment_id: PAYMENT-5678TYUI
                            rel: update
                            method: PATCH
                      links:
                        - href: /orders/@order_id
                          id:
                            order_id: ORDER-1234QWER
                          rel: order
                          method: GET
                Submit with Direct Payment:
                  value:
                    system:
                      messageId: 89817674-daOO-4883
                      returnCode: '200'
                      returnReason: Successful operation
                      sentTime: '2016-11-15T10:00:00.000Z'
                      responseTime: '2016-11-15T10:00:00.000Z'
                    response:
                      payment:
                        id: '14627849160897986'
                        pasref: '14627849160897986'
                        created_at: '2021-06-11T14:10:25Z'
                        last_modified: null
                        amount: 1000
                        currency: GBP
                        status: pending
                        payment_method:
                          hosted_payment:
                            direct_payment:
                              payment_option: applepay
                              token: <payment token>
                              card:
                                brand: VISA
                                authcode: '12345'
                                mcn: 401200******1112
                                cvv_result: MATCHED
                                dcc:
                                  amount: 1324
                                  currency: USD
                                  ccp: FEXCO
                                  fx_rate: 1.3244
                                  margin_percentage: 3.75
                        metadata: null
                        links:
                          - href: /payments/@payment_id
                            id:
                              payment_id: '14627849160897986'
                            rel: self
                            method: GET
                          - href: /payments/@payment_id
                            id:
                              payment_id: '14627849160897986'
                            rel: update
                            method: PATCH
                          - href: /payments/@payment_id/refund
                            id:
                              payment_id: '14627849160897986'
                            rel: refund
                            method: POST
                      links:
                        - href: /orders/@order_id
                          id:
                            order_id: ORDER-1234QWER
                          rel: order
                          method: GET
        '400':
          description: Missing or invalid Parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
              example:
                system:
                  messageId: 89817674-daOO-4883
                  returnCode: '400'
                  returnReason: <Corresponding Error Message>
                  sentTime: '2016-11-15T10:00:00.000Z'
                  responseTime: '2016-11-15T10:00:00.000Z'
                response:
                  request_result:
                    api_gateway:
                      code: '999999'
                      message: System Error
                    payment_gateway:
                      code: '101'
                      message: Declined by Bank  
        '403':
          description: Authorization credentials are missing or invalid.
        '404':
          description: Empty resource/resource not found.
        '500':
          description: The request failed due to an internal error.
      security:
        - basicAuth: []
  /payments/{id}:
    get:
      tags:
        - Payments
      summary: Retrieve a particular Payment by ID
      description: |
        This endpoint retrieves the details of a particular Payment.
      parameters:
        - name: x-hsbc-profileid
          in: header
          required: true
          description: '[Profile ID]'
          schema:
            type: string
          example: 8b915a4f5b5047f091f210e2232b5ced  
        - name: x-hsbc-msg-encrypt-id
          in: header
          required: true
          description: '[Merchant ID]+[JWS ID]+[JWE ID]'
          schema:
            type: string
          example: 42298549900001+0001+0002
        - name: message_encrypt
          in: header
          required: false
          description: 'To indicate this API request is without message encryption. ***This header is only applicable in Sandbox environment.***'
          schema:
            type: string
          example: false
        - name: id
          in: path
          required: true
          description: |
            Unique ```id``` of ```payment```

            ***Data Encryption*** *is enforced.*
          schema:
            type: string  
      responses:
        '200':
          description: |
            Successful operation.
            
            ***Data Encryption*** *is enforced. API Schema intends to demonstrate the skeleton of the message payload only.*
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentOutput'
              example:
                system:
                  messageId: 89817674-daOO-4883
                  returnCode: '200'
                  returnReason: Successful operation
                  sentTime: '2016-11-15T10:00:00.000Z'
                  responseTime: '2016-11-15T10:00:00.000Z'
                response:
                  payment:
                    id: '14627849160897986'
                    pasref: '14627849160897986'
                    created_at: '2021-06-11T14:10:25Z'
                    last_modified: '2021-06-12T14:10:25Z'
                    amount: 1000
                    currency: GBP
                    status: batched
                    payment_method:
                      hosted_payment:
                        access_method:
                          form_post: <Encoded_Redirect_Submit_Form>
                          iframe_form_post: <Encoded_Redirect_Submit_Form>
                          payment_link: https://pay.sandbox.realexpayments.com/card.html?guid=f82dc878-4752-4d25-8c4b-7d48b3a863ec
                        url_settings:
                          return_page: https://merchant.com/returnPage
                          notification: https://merchant.com/returnStatus
                        payment_option: cards
                        billing:
                          first_name: james
                          last_name: mason
                          email: james.mason@example.com
                          street1: Flat 123
                          street2: House 456
                          street3: Unit 4
                          city: Halifax
                          postal_code: W5 9HR
                          country: '826'
                        card:
                          brand: VISA
                          authcode: '12345'
                          mcn: 401200******1112
                          cvv_result: MATCHED
                          dcc:
                            amount: 1324
                            currency: USD
                            ccp: FEXCO
                            fx_rate: 1.3244
                            margin_percentage: 3.75
                    metadata: null
                    links:
                      - href: /refunds/@refund_id
                        id:
                          refund_id: '1002345678999'
                        rel: refund
                        method: GET
                      - href: /refunds/@refund_id
                        id:
                          refund_id: '7778889996665'
                        rel: refund
                        method: GET
                      - href: /payments/@payment_id/refund
                        id:
                          payment_id: '14627849160897986'
                        rel: refund
                        method: POST
                      - href: /payments/@payment_id
                        id:
                          payment_id: '14627849160897986'
                        rel: update
                        method: PATCH
                  links:
                    - href: /orders/@order_id
                      id:
                        order_id: ORDER-1234QWER
                      rel: order
                      method: GET
        '400':
          description: Missing or invalid Parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
              example:
                system:
                  messageId: 89817674-daOO-4883
                  returnCode: '400'
                  returnReason: <Corresponding Error Message>
                  sentTime: '2016-11-15T10:00:00.000Z'
                  responseTime: '2016-11-15T10:00:00.000Z'
                response:
                  request_result:
                    api_gateway:
                      code: '999999'
                      message: System Error
                    payment_gateway:
                      code: '101'
                      message: Declined by Bank  
        '403':
          description: Authorization credentials are missing or invalid.
        '404':
          description: Empty resource/resource not found.
        '500':
          description: The request failed due to an internal error.
      security:
        - basicAuth: []
    patch:
      tags:
        - Payments
      summary: Update a Payment such as Void a Payment or Add Notes
      description: |
        A payment can be voided by updating its ```status``` or modified by adding/replacing its ```metadata```.
        
        > #### **NOTE:**
        >
        > #### Only an unsettled payment can be voided.
      parameters:
        - name: x-hsbc-profileid
          in: header
          required: true
          description: '[Profile ID]'
          schema:
            type: string
          example: 8b915a4f5b5047f091f210e2232b5ced  
        - name: x-hsbc-msg-encrypt-id
          in: header
          required: true
          description: '[Merchant ID]+[JWS ID]+[JWE ID]'
          schema:
            type: string
          example: 42298549900001+0001+0002
        - name: message_encrypt
          in: header
          required: false
          description: 'To indicate this API request is without message encryption. ***This header is only applicable in Sandbox environment.***'
          schema:
            type: string
          example: false
        - name: id
          in: path
          required: true
          description: |
            Unique ```id``` of ```payment```

            ***Data Encryption*** *is enforced.*
          schema:
            type: string  
      requestBody:
        description: |
          ***Data Encryption*** *is enforced. API Schema intends to demonstrate the skeleton of the message payload only.*
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentPatch'
        required: true
      responses:
        '200':
          description: |
            Successful operation.
            
            ***Data Encryption*** *is enforced. API Schema intends to demonstrate the skeleton of the message payload only.*
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentOutput'
              example:
                system:
                  messageId: 89817674-daOO-4883
                  returnCode: '200'
                  returnReason: Successful operation
                  sentTime: '2016-11-15T10:00:00.000Z'
                  responseTime: '2016-11-15T10:00:00.000Z'
                response:
                  payment:
                    id: PAYMENT-5678TYUI
                    pasref: '14627849160897986'
                    created_at: '2021-06-11T14:10:25Z'
                    last_modified: '2021-06-12T14:10:25Z'
                    amount: 1000
                    currency: GBP
                    status: voided
                    payment_method:
                      hosted_payment:
                        access_method:
                          form_post: <Encoded_Redirect_Submit_Form>
                          iframe_form_post: <Encoded_Redirect_Submit_Form>
                          payment_link: https://pay.sandbox.realexpayments.com/card.html?guid=f82dc878-4752-4d25-8c4b-7d48b3a863ec
                        url_settings:
                          return_page: https://merchant.com/returnPage
                          notification: https://merchant.com/returnStatus
                        payment_option: cards
                        billing:
                          first_name: james
                          last_name: mason
                          email: james.mason@example.com
                          street1: Flat 123
                          street2: House 456
                          street3: Unit 4
                          city: Halifax
                          postal_code: W5 9HR
                          country: '826'
                        card:
                          brand: VISA
                          authcode: '12345'
                          mcn: 401200******1112
                          cvv_result: MATCHED
                          dcc:
                            amount: 1324
                            currency: USD
                            ccp: FEXCO
                            fx_rate: 1.3244
                            margin_percentage: 3.75
                    metadata:
                      customer_id: '12345'
                      customer_comment: engrave customer's name on product
                    links:
                      - href: /payments/@payment_id
                        id:
                          payment_id: PAYMENT-5678TYUI
                        rel: self
                        method: GET
                      - href: /payments/@payment_id
                        id:
                          payment_id: PAYMENT-5678TYUI
                        rel: update
                        method: PATCH
                      - href: /refunds/@refund_id
                        id:
                          refund_id: '1002345678999'
                        rel: refund
                        method: GET
                      - href: /refunds/@refund_id
                        id:
                          refund_id: '7778889996665'
                        rel: refund
                        method: GET
                      - href: /payments/@payment_id/refund
                        id:
                          payment_id: PAYMENT-5678TYUI
                        rel: refund
                        method: POST
                  links:
                    - href: /orders/@order_id
                      id:
                        order_id: ORDER-1234QWER
                      rel: order
                      method: GET
        '400':
          description: Missing or invalid Parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
              example:
                system:
                  messageId: 89817674-daOO-4883
                  returnCode: '400'
                  returnReason: <Corresponding Error Message>
                  sentTime: '2016-11-15T10:00:00.000Z'
                  responseTime: '2016-11-15T10:00:00.000Z'
                response:
                  request_result:
                    api_gateway:
                      code: '999999'
                      message: System Error
                    payment_gateway:
                      code: '101'
                      message: Declined by Bank  
        '403':
          description: Authorization credentials are missing or invalid.
        '404':
          description: Empty resource/resource not found.
        '500':
          description: The request failed due to an internal error.
      security:
        - basicAuth: []
  /payments/{id}/refund:
    post:
      tags:
        - Refunds
      summary: Create a Refund for a Payment
      description: |
        This endpoint creates a Refund which links to a specific Payment.
      parameters:
        - name: x-hsbc-profileid
          in: header
          required: true
          description: '[Profile ID]'
          schema:
            type: string
          example: 8b915a4f5b5047f091f210e2232b5ced  
        - name: x-hsbc-msg-encrypt-id
          in: header
          required: true
          description: '[Merchant ID]+[JWS ID]+[JWE ID]'
          schema:
            type: string
          example: 42298549900001+0001+0002
        - name: message_encrypt
          in: header
          required: false
          description: 'To indicate this API request is without message encryption. ***This header is only applicable in Sandbox environment.***'
          schema:
            type: string
          example: false
        - name: id
          in: path
          required: true
          description: |
            Unique ```id``` of ```payment```

            ***Data Encryption*** *is enforced.*
          schema:
            type: string  
      requestBody:
        description: |
          ***Data Encryption*** *is enforced. API Schema intends to demonstrate the skeleton of the message payload only.*
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundInput'
        required: true
      responses:
        '200':
          description: |
            Successful operation.
            
            ***Data Encryption*** *is enforced. API Schema intends to demonstrate the skeleton of the message payload only.*
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundOutput'
              example:
                system:
                  messageId: 89817674-daOO-4883
                  returnCode: '200'
                  returnReason: Successful operation
                  sentTime: '2016-11-15T10:00:00.000Z'
                  responseTime: '2016-11-15T10:00:00.000Z'
                response:
                  refund:
                    id: '16219383951512048'
                    pasref: '16219383951512048'
                    created_at: '2021-06-11T14:10:25Z'
                    last_modified: null
                    amount: 1000
                    currency: GBP
                    status: pending
                    metadata:
                      refund_reason: Product is damaged
                    links:
                      - href: /refunds/@refund_id
                        id:
                          refund_id: '16219383951512048'
                        rel: self
                        method: GET
                  links:
                    - href: /payment/@payment_id
                      id:
                        order_id: '14627849160897986'
                      rel: payment
                      method: GET
        '400':
          description: Missing or invalid Parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
              example:
                system:
                  messageId: 89817674-daOO-4883
                  returnCode: '400'
                  returnReason: <Corresponding Error Message>
                  sentTime: '2016-11-15T10:00:00.000Z'
                  responseTime: '2016-11-15T10:00:00.000Z'
                response:
                  request_result:
                    api_gateway:
                      code: '999999'
                      message: System Error
                    payment_gateway:
                      code: '101'
                      message: Declined by Bank
        '403':
          description: Authorization credentials are missing or invalid.
        '404':
          description: Empty resource/resource not found.
        '500':
          description: The request failed due to an internal error.
      security:
        - basicAuth: []
  /refunds/{id}:
    get:
      tags:
        - Refunds
      summary: Retrieve a particular Refund by ID
      description: |
        This endpoint retrieves the details of a particular Refund.
      parameters:
        - name: x-hsbc-profileid
          in: header
          required: true
          description: '[Profile ID]'
          schema:
            type: string
          example: 8b915a4f5b5047f091f210e2232b5ced  
        - name: x-hsbc-msg-encrypt-id
          in: header
          required: true
          description: '[Merchant ID]+[JWS ID]+[JWE ID]'
          schema:
            type: string
          example: 42298549900001+0001+0002
        - name: message_encrypt
          in: header
          required: false
          description: 'To indicate this API request is without message encryption. ***This header is only applicable in Sandbox environment.***'
          schema:
            type: string
          example: false
        - name: id
          in: path
          required: true
          description: |
            Unique ```id``` of ```refund```

            ***Data Encryption*** *is enforced.*
          schema:
            type: string
      responses:
        '200':
          description: |
            Successful operation.
            
            ***Data Encryption*** *is enforced. API Schema intends to demonstrate the skeleton of the message payload only.*
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundOutput'
              example:
                system:
                  messageId: 89817674-daOO-4883
                  returnCode: '200'
                  returnReason: Successful operation
                  sentTime: '2016-11-15T10:00:00.000Z'
                  responseTime: '2016-11-15T10:00:00.000Z'
                response:
                  refund:
                    id: '16219383951512048'
                    pasref: '16219383951512048'
                    created_at: '2021-06-11T14:10:25Z'
                    last_modified: null
                    amount: 1000
                    currency: GBP
                    status: pending
                    metadata:
                      refund_reason: Product is damaged
                    links: null
                  links:
                    - href: /payment/@payment_id
                      id:
                        order_id: '14627849160897986'
                      rel: payment
                      method: GET
        '400':
          description: Missing or invalid Parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
        '403':
          description: Authorization credentials are missing or invalid.
        '404':
          description: Empty resource/resource not found.
        '500':
          description: The request failed due to an internal error.
      security:
        - basicAuth: []
  /<Callback URL predefined by Merchant>:
    post:
      tags:
        - Webhooks
      summary: 'Webhook for Payments'
      description: |
        The table below lists the Webhook events available for payments.
        
        Webhook Event |  Definition
        ---|---
        payment.captured | Triggered when a payment is successfully captured.
        payment.failed | Triggered when a payment fails.
        
      parameters:
        - name: x-hsbc-webhook-id
          in: header
          required: true
          description: UUID
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentWebhook'
            example:
              webhook:
                event: payment.captured
                entities:
                  - payment
              payload:
                payment:
                  id: '14627849160897986'
                  pasref: '14627849160897986'
                  created_at: '2021-06-11T14:10:25Z'
                  last_modified: null
                  amount: 1000
                  currency: GBP
                  status: pending
                  payment_method:
                    hosted_payment:
                      access_method:
                        form_post: <Encoded_Redirect_Submit_Form>
                        iframe_form_post: <Encoded_Redirect_Submit_Form>
                        payment_link: https://pay.sandbox.realexpayments.com/card.html?guid=f82dc878-4752-4d25-8c4b-7d48b3a863ec
                      url_settings:
                        return_page: https://merchant.com/returnPage
                        notification: https://merchant.com/returnStatus
                      payment_option: paypal
                      billing:
                        first_name: james
                        last_name: mason
                        email: james.mason@example.com
                        street1: Flat 123
                        street2: House 456
                        street3: Unit 4
                        city: Halifax
                        postal_code: W5 9HR
                        country: '826'
                      paypal:
                        TransactionID: 0F513533U4356815L
                        SecureMerchantAccountID: XXXXXXXXXXXXX
                        PayPalAccountID: testmerchant9999@exmaple.com
                  metadata:
                    customer_id: '12345'
                    customer_comment: engrave customer's name on product
                  links: null
        description: |
          ***Data Encryption*** *is enforced. API Schema intends to demonstrate the skeleton of the message payload only.*
        required: true
      responses:
        '200':
          description: |
            Successful operation.
            
            ***Data Encryption*** *is enforced. API Schema intends to demonstrate the skeleton of the message payload only.*
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Callback'
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    OrderInput:
      type: object
      description: | 
        These input fields are the subset and for creating an ```Order``` entity. 
      required:
        - txn_reference
        - account_name
        - amount
        - currency
        - items
      properties:
        txn_reference:
          type: string
          maxLength: 50
          description: |
            Unique Transaction Reference defined by Merchant, it will be appeared to be the unique ```id``` of an ```order```.
          example: ORDER-1234QWER
        account_name:
          type: string
          maxLength: 30
          description: |
            Merchant account name given during the merchant profile setup.
          example: internet
        amount:
          type: integer
          minimum: 1
          maximum: 9999999999
          description: >
            Order Amount

            * Format: Eliminate punctuation and sign, support 2 decimal places according to ISO 4217, e.g. £10.50 = 1050
          example: 1000
        currency:
          type: string
          maxLength: 3
          description: |
            Order Currency
          example: GBP
          enum:
            - GBP
            - EUR
            - USD
        items:
          type: array
          minItems: 1
          maxItems: 20
          description: |
            List of Product Descriptions in the basket
          items:
            $ref: '#/components/schemas/Item'
        metadata:
          type: object
          description: |
            Key-value pair that can be used to store additional information about the entity.
            
            ***maxLength: 512***
            
            ***maxItem: 20***
            
            ***example:***
            ```
            "metadata": {
              "note_1": "Customer is a VIP",
              "note_2": "In-store credit is used",
              "key_3": "value_3",
              "key_4": "value_4"
            }
            ```
        payment:
          $ref: '#/components/schemas/PaymentInput'
    OrderOutput:
      type: object
      required:
        - system
        - response
      properties:
        system:
          $ref: '#/components/schemas/System'
        response:
          required:
            - order
          type: object
          description: |
            Response message payload
          properties:
            order:
              $ref: '#/components/schemas/Order'
    Order:
      type: object
      required:
        - id
        - txn_reference
        - created_at
        - last_modified
        - account_name
        - amount
        - currency
        - items
      properties:
        id:
          type: string
          maxLength: 50
          description: |
            Unique Entity ID of an Order, derived from ```txn_reference```
          example: ORDER-1234QWER
        txn_reference:
          type: string
          maxLength: 50
          description: |
            Unique Transaction Reference defined by Merchant, it will be appeared to be the unique ```id``` of an ```order```
          example: ORDER-1234QWER
        created_at:
          type: string
          maxLength: 20
          format: date-time
          description: |
            Created Time of the Order
          example: '2021-06-11T12:10:25Z'
        last_modified:
          type: string
          maxLength: 20
          format: date-time
          description: |
            Last Modified Time of the Order
          example: '2021-06-12T15:00:25Z'
        account_name:
          type: string
          maxLength: 30
          description: |
            Merchant account name given during the merchant profile setup
          example: internet
        amount:
          type: integer
          minimum: 1
          maximum: 9999999999
          description: >
            Order Amount

            * Format: Eliminate punctuation and sign, support 2 decimal places according to ISO 4217, e.g. £10.50 = 1050
          example: 1000
        currency:
          type: string
          maxLength: 3
          description: |
            Order Currency
          example: GBP
          enum:
            - GBP
            - EUR
            - USD
        items:
          type: array
          minItems: 1
          maxItems: 20
          description: |
            List of Product Descriptions in the basket
          items:
            $ref: '#/components/schemas/Item'
        metadata:
          type: object
          description: |
            Key-value pair that can be used to store additional information about the entity.
            
            ***maxLength: 512***
            
            ***maxItem: 20***
            
            ***example:***
            ```
            "metadata": {
              "note_1": "Customer is a VIP",
              "note_2": "In-store credit is used",
              "key_3": "value_3",
              "key_4": "value_4"
            }
            ```
        payments:
          type: array
          description: |
            List of all payments linked with this Order, appear if query parameter ```$expand=payment``` is in place.
          items:
            $ref: '#/components/schemas/Payment'
        links:
          type: array
          description: |
            List of all related resources. If query parameter ```$expand=payment``` is opted out, payments will be related here in HAL format.
          items:
            $ref: '#/components/schemas/HAL'
    PaymentInput:
      type: object
      description: | 
        These input fields are the subset and for creating a ```Payment``` entity. 
        
        * Required when the operation ```POST /orders?$expand=payment``` is in place.
      required:
        - payment_method
      properties:
        payment_method:
          type: object
          description: |
            **oneOf**
            
            ```hosted_payment```
            
            ```direct_payment```
          properties:
            hosted_payment:
              required:
                - url_settings
                - billing
              type: object
              description: |
                Invoke this object if the payment is processed by Hosted Payment.
              properties:
                url_settings:
                  required:
                    - return_page
                    - notification
                  type: object
                  description: |
                    URL settings for the Hosted Payment Page
                  properties:
                    return_page:
                      type: string
                      pattern: ^(https?:\/\/)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)$
                      maxLength: 2083
                      description: |
                        URL defined by Merchant for redirecting back to Merchant's website after the payment process is completed in the HPP.
                    notification:
                      type: string
                      pattern: ^(https?:\/\/)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)$
                      maxLength: 2083
                      description: |
                        URL defined by Merchant for receiving ```Payment Webhooks```.
                      example: https://merchant.com/returnStatus
                payment_option:
                  type: array
                  items:
                    type: string
                    enum:
                      - cards
                      - paypal
                      - wechatpay
                      - testpay
                  uniqueItems: true
                  description: |
                    Opt in Payment Option(s) to be displayed in the HPP, can be multiple. If no value is provided, all possible options will be displayed.
                    
                    Possible Value | Definition
                    ---|---
                    cards | Credit / Debit Cards
                    paypal | Paypal
                    wechatpay | WeChat Pay
                    testpay | Test Pay (Payment simulator available in sandbox only)
                  example:
                    - cards
                    - paypal
                    - wechatpay
                billing:
                  required:
                    - first_name
                    - last_name
                    - email
                    - street1
                    - street2
                    - street3
                    - city
                    - postal_code
                    - country
                  type: object
                  properties:
                    first_name:
                      type: string
                      maxLength: 60
                      description: |
                        Customer's first name. The value should be the same as the value that appears on the card.
                      example: james
                    last_name:
                      type: string
                      maxLength: 60
                      description: |
                        Customer's last name. The value should be the same as the value that appears on the card.
                      example: mason
                    email:
                      type: string
                      pattern: ^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,5})$
                      maxLength: 254
                      description: |
                        Customer's email address
                      example: james.mason@example.com
                    street1:
                      type: string
                      maxLength: 50
                      description: |
                        First line of the customer's billing address.
                      example: Flat 123
                    street2:
                      type: string
                      maxLength: 50
                      description: |
                        Second line of the customer's billing address.
                      example: House 456
                    street3:
                      type: string
                      maxLength: 50
                      description: |
                        Third line of the customer's billing address.
                      example: Unit 4
                    city:
                      type: string
                      maxLength: 40
                      description: |
                        The city of the customer's billing address.
                      example: Halifax
                    postal_code:
                      type: string
                      maxLength: 16
                      description: |
                        ZIP or other postal code customer's billing address.
                      example: W5 9HR
                    country:
                      type: string
                      maxLength: 3
                      description: |
                        The country of the customer's billing address. ISO 3166-1 numeric three-digit country code. For example, US = 840.
                      example: '826'
            direct_payment:
              required:
                - payment_option
                - token
              type: object
              description: |
                Invoke this object if the payment is processed by Direct Payment.
              properties:
                payment_option:
                  type: string
                  maxLength: 10
                  description: |
                    Payment Option

                    Possible Value | Definition
                    ---|---
                    applepay | Apple Pay
                    googlepay | Google Pay
                  example: applepay
                  enum:
                    - applepay
                    - googlepay
                token:
                  type: string
                  maxLength: 1000
                  description: |
                    Payment Token from Apple Pay or Google Pay
                    
                    ```
                    /* A Payment Token example from Apple Pay */
                    {"data":"Sk1pYr1MYT4SMEKLibAPF342LZy3GEZJzdOZ0LdMK55k3UN02GaAphr/w8YtU+Cr5TZzJgHdCUh/35aEz3ORJrheWRZKHVw0J+58f6eZBuIXOkeTbIS3a98cbYZKZNGqfkgm1LcVHhXmM98rgcW95vUwUqiMweaLgdc+R9uppEEeFBLwtpItUZbbxy1UBBaRX+ja5b4esBorZ9x9sOloVqFH9aSoBZV/ks0H+YZqk9B+8tJ4z9YtYX1Ho9B1A/KG0SW889/+JZ+aTVrGCKbzBXoV/+u3ze/J0A7wtz5VETfOqNiD6KZIpsQ4E/AMmfNYTNVYFsGcyYMPKEw+1iKQO5MEYMB0l0oK45gHs3NN2tNE+DXWrMOCgI1IMneoW6aAiOhgbt1DfzBFNRe4bm1EkoW5M14Vvuj5EQb6fDnRK38=","header":{"publicKeyHash":"ilecVF58bpB8qio67Y0Okg5Hl6eirw2Y1v1KUCsdVgQ=","ephemeralPublicKey":"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEybsedLDKO/lfI8I/Zd0usQFbxV2aEktcKeudAHB+xzduPRcQ8vdWQ0roHUgQQNRhR3zXnwJes20nP4bbb7US5w==","transactionId":"b794b93281e1fbd9a480e3f63031c40bca0308ec513c2681ed66fd29c3c1b325"},"version":"EC_v1"}
                    
                    /* Escape character added when cast into JSON String value */
                    {\"data\":\"Sk1pYr1MYT4SMEKLibAPF342LZy3GEZJzdOZ0LdMK55k3UN02GaAphr\/w8YtU+Cr5TZzJgHdCUh\/35aEz3ORJrheWRZKHVw0J+58f6eZBuIXOkeTbIS3a98cbYZKZNGqfkgm1LcVHhXmM98rgcW95vUwUqiMweaLgdc+R9uppEEeFBLwtpItUZbbxy1UBBaRX+ja5b4esBorZ9x9sOloVqFH9aSoBZV\/ks0H+YZqk9B+8tJ4z9YtYX1Ho9B1A\/KG0SW889\/+JZ+aTVrGCKbzBXoV\/+u3ze\/J0A7wtz5VETfOqNiD6KZIpsQ4E\/AMmfNYTNVYFsGcyYMPKEw+1iKQO5MEYMB0l0oK45gHs3NN2tNE+DXWrMOCgI1IMneoW6aAiOhgbt1DfzBFNRe4bm1EkoW5M14Vvuj5EQb6fDnRK38=\",\"header\":{\"publicKeyHash\":\"ilecVF58bpB8qio67Y0Okg5Hl6eirw2Y1v1KUCsdVgQ=\",\"ephemeralPublicKey\":\"MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEybsedLDKO\/lfI8I\/Zd0usQFbxV2aEktcKeudAHB+xzduPRcQ8vdWQ0roHUgQQNRhR3zXnwJes20nP4bbb7US5w==\",\"transactionId\":\"b794b93281e1fbd9a480e3f63031c40bca0308ec513c2681ed66fd29c3c1b325\"},\"version\":\"EC_v1\"}
                    ```
                    
                    ```
                    /* A Payment Token example from Google Pay */
                    {"signature":"MEUCIHI37nu9JakubEtif26PtEvw9lUC4kBZ+pfqZM0AIw7IAiEA9izE5MEBzZK8tjZ8fjjMzy/VAdVXfgPflLm8gNIlhfw\u003d","protocolVersion":"ECv1","signedMessage":"{\"encryptedMessage\":\"kWUA7N1qr1wOPZ4Suud+Md6M1L4Bmr4t3DH+pdKf0YaciJZuzK57kmmlj6MQC1DjH0dmvHKo+pRzP2bc/9L0m2hChbAZFilfTlvZn6d86tYv9ii/2BjPe9UEswAmZrjo3hcVRDaoP1Gid/XcjzkOpYeOb0WQWoI9jx4osPsQfoLtst9qseDH7q0rRO9x3PQGLriCyzFkasqTjxGp5gaKTdzS4Mob7RORmxGCXM5oqYeE+anx5ctOXnh2WVHXLiQSKvtlhKvzTbTnUkA6ddFhgYc0OflDbW9T7b6Pw8l67XtqSgvZgm8gO9v25PnBFPaSx2nojzb3Tc7l5wMTpkRZQG5qeJLGpRGTZC+YDF/tLuigGxwaz+aBklAWmL/NyiH9HMBdtuOWTWp9Ir2pMQrYEgFJOrqziXc6fiOxjOmszMhvMKrlOjqJPZfqSXrYyj4vIJASBEzy/EHke+lBEaA\\u003d\",\"ephemeralPublicKey\":\"BPMwpda0BSS5gNqs9csIzvqgqn1zQBvcKipZf+goeVExgUwfqDGggfmKFTsSQTs4qlWvl5SozieeRMZQcjubWRw\\u003d\",\"tag\":\"wGWbvZH6YDGZUm+oN8uhv7OwGeNVUaNKn74/hZB595c\\u003d\"}"}
                    
                    /* Escape character added when cast into JSON String value */
                    {\"signature\":\"MEUCIHI37nu9JakubEtif26PtEvw9lUC4kBZ+pfqZM0AIw7IAiEA9izE5MEBzZK8tjZ8fjjMzy\/VAdVXfgPflLm8gNIlhfw\\u003d\",\"protocolVersion\":\"ECv1\",\"signedMessage\":\"{\\\"encryptedMessage\\\":\\\"kWUA7N1qr1wOPZ4Suud+Md6M1L4Bmr4t3DH+pdKf0YaciJZuzK57kmmlj6MQC1DjH0dmvHKo+pRzP2bc\/9L0m2hChbAZFilfTlvZn6d86tYv9ii\/2BjPe9UEswAmZrjo3hcVRDaoP1Gid\/XcjzkOpYeOb0WQWoI9jx4osPsQfoLtst9qseDH7q0rRO9x3PQGLriCyzFkasqTjxGp5gaKTdzS4Mob7RORmxGCXM5oqYeE+anx5ctOXnh2WVHXLiQSKvtlhKvzTbTnUkA6ddFhgYc0OflDbW9T7b6Pw8l67XtqSgvZgm8gO9v25PnBFPaSx2nojzb3Tc7l5wMTpkRZQG5qeJLGpRGTZC+YDF\/tLuigGxwaz+aBklAWmL\/NyiH9HMBdtuOWTWp9Ir2pMQrYEgFJOrqziXc6fiOxjOmszMhvMKrlOjqJPZfqSXrYyj4vIJASBEzy\/EHke+lBEaA\\\\u003d\\\",\\\"ephemeralPublicKey\\\":\\\"BPMwpda0BSS5gNqs9csIzvqgqn1zQBvcKipZf+goeVExgUwfqDGggfmKFTsSQTs4qlWvl5SozieeRMZQcjubWRw\\\\u003d\\\",\\\"tag\\\":\\\"wGWbvZH6YDGZUm+oN8uhv7OwGeNVUaNKn74\/hZB595c\\\\u003d\\\"}\"}
                    ```
                  example: ''
        metadata:
          type: object
          description: |
            Key-value pair that can be used to store additional information about the entity.
            
            ***maxLength: 512***
            
            ***maxItem: 20***
            
            ***example:***
            ```
            "metadata": {
              "customer_id": "12345",
              "customer_comment": "engrave customer's name on product",
              "key_3": "value_3",
              "key_4": "value_4"
            }
            ```
    PaymentPatch:
      properties:
        status:
          type: string
          maxLength: 50
          description: |
            Payment Status, available to void an unsettled payment by change the status to ```void```
          example: void
          enum:
            - void
        metadata:
          type: object
          description: |
            Key-value pair that can be used to store additional information about the entity.
            
            ***maxLength: 512***
            
            ***maxItem: 20***
            
            ***example:***
            ```
            "metadata": {
              "customer_id": "12345",
              "customer_comment": "engrave customer's name on product",
              "key_3": "value_3",
              "key_4": "value_4"
            }
            ```
    PaymentOutput:
      type: object
      required:
        - system
        - response
      properties:
        system:
          $ref: '#/components/schemas/System'
        response:
          required:
            - payment
          type: object
          description: |
            Response message payload
          properties:
            payment:
              $ref: '#/components/schemas/Payment'
            links:
              type: array
              description: |
                List of all related resources.
              items:
                $ref: '#/components/schemas/HAL'
              example:
                - href: /orders/@order_id
                  id:
                    order_id: ORDER-1234QWER
                  rel: order
                  method: GET
    PaymentWebhook:
      type: object
      required:
        - webhook
        - payload
      properties:
        webhook:
          required:
            - event
            - entities
          type: object
          properties:
            event:
              type: string
              maxLength: 100
              description: |
                Event Type
              example: payment.captured
              enum:
                - payment.captured
                - payment.failed
            entities:
              type: array
              items:
                type: string
                enum:
                  - payment
              uniqueItems: true
              description: |
                The list of Entities contained in this Webhook
              example:
                - payment
        payload:
          required:
            - payment
          type: object
          properties:
            payment:
              $ref: '#/components/schemas/Payment'
    Payment:
      required:
        - id
        - pasref
        - created_at
        - last_modified
        - amount
        - currency
        - status
        - payment_method
      type: object
      properties:
        id:
          type: string
          maxLength: 50
          description: |
            Unique Entity ID of a Payment
          example: '14627849160897986'
        pasref:
          type: string
          maxLength: 50
          description: |
            Payment Reference. A unique reference generated by Payment Gateway
          example: '14627849160897986'
        created_at:
          type: string
          format: date-time
          maxLength: 20
          description: |
            Created Time of the payment
          example: '2021-06-11T14:10:25Z'
        last_modified:
          type: string
          format: date-time
          maxLength: 20
          description: |
            Last Modified Time of the payment
          example: '2021-06-12T14:10:25Z'
        amount:
          type: integer
          minimum: 1
          maximum: 9999999999
          description: |
            Payment Amount

            Format: Eliminate punctuation and sign, support 2 decimal places according to ISO 4217, e.g. £10.50 = 1050
          example: 1000
        currency:
          type: string
          maxLength: 3
          description: |
            Payment Currency
          example: GBP
          enum:
            - GBP
            - EUR
            - USD
        status:
          type: string
          maxLength: 50
          description: |
            The payment/settlement status of the corresponding Payment, only available for Card Payment


            Possible Value | Definition
            ---|---
            initiated | The transaction is yet to be processed.
            pending | The transaction has been successfully processed and is awaiting batching (midnight cutoff). Can still be voided prior to batching. Applies to both refunds and sales.
            voided | The pending transaction has been voided and will not be batched for settlement. Applies to both refunds and sales.
            batched | The transaction has been batched and sent for settlement, can no longer be voided. Applies to both refunds and sales.
          example: batched
          enum:
            - initiated
            - pending
            - voided
            - batched
        payment_method:
          type: object
          description: |
            **oneOf**
            
            ```hosted_payment```
            
            ```direct_payment```
          properties:
            hosted_payment:
              required:
                - access_method
                - url_settings
                - billing
                - payment_option
              type: object
              description: |
                Appear if the payment is processed by Hosted Payment.
              properties:
                access_method:
                  required:
                    - form_post
                    - iframe_form_post
                    - payment_link
                  type: object
                  description: | 
                    The available method(s) of accessing the Payment Page
                  properties:
                    form_post:
                      type: string
                      maxLength: 5120
                      description: A HTML FORM POST with all parameters
                      example: <Encoded_Redirect_Submit_Form>
                    iframe_form_post:
                      type: string
                      maxLength: 5120
                      description: A HTML FORM POST with all parameters including exclusive settings for iframe-enabled layout
                      example: <Encoded_Redirect_Submit_Form>
                    payment_link:
                      type: string
                      maxLength: 1024
                      description: Pay By Link. For merchants who wish to embed a payment link in an SMS or an email, you can send a request to HPP to create a transaction link to be paid within 24 hours. HPP will respond with the dedicated payment link which can then be sent on to your customer.
                      example: https://pay.sandbox.realexpayments.com/card.html?guid=f82dc878-4752-4d25-8c4b-7d48b3a863ec
                url_settings:
                  required:
                    - return_page
                    - notification
                  type: object
                  description: URL settings for the Hosted Payment Page
                  properties:
                    return_page:
                      type: string
                      pattern: | 
                        ^(https?:\/\/)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)$
                      maxLength: 2083
                      description: >-
                        URL provided by Merchant for returning status used by
                        Payment Status Notification API
                      example: https://merchant.com/returnPage
                    notification:
                      type: string
                      pattern: |
                        ^(https?:\/\/)?(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)$
                      maxLength: 2083
                      description: URL defined by Merchant for receiving ```Payment Webhooks```.
                      example: https://merchant.com/returnStatus
                payment_option:
                  type: string
                  maxLength: 20
                  description: |
                    Payment Option selected in the HPP payment

                    Possible Value | Definition
                    ---|---
                    cards | Credit / Debit Cards
                    paypal | Paypal
                    wechatpay | WeChat Pay
                    testpay | Testpay (Payment simulator available only in sandbox)
                  example: cards
                  enum:
                    - cards
                    - paypal
                    - wechatpay
                    - testpay
                billing:
                  required:
                    - first_name
                    - last_name
                    - email
                    - street1
                    - street2
                    - street3
                    - city
                    - postal_code
                    - country
                  type: object
                  properties:
                    first_name:
                      type: string
                      maxLength: 60
                      description: |
                        Customer's first name. The value should be the same as the value that appears on the card.
                      example: james
                    last_name:
                      type: string
                      maxLength: 60
                      description: |
                        Customer's last name. The value should be the same as the value that appears on the card.
                      example: mason
                    email:
                      type: string
                      pattern: ^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,5})$
                      maxLength: 254
                      description: |
                        Customer's email address
                      example: james.mason@example.com
                    street1:
                      type: string
                      maxLength: 50
                      description: |
                        First line of the customer's billing address.
                      example: Flat 123
                    street2:
                      type: string
                      maxLength: 50
                      description: |
                        Second line of the customer's billing address.
                      example: House 456
                    street3:
                      type: string
                      maxLength: 50
                      description: |
                        Third line of the customer's billing address.
                      example: Unit 4
                    city:
                      type: string
                      maxLength: 40
                      description: |
                        The city of the customer's billing address.
                      example: Halifax
                    postal_code:
                      type: string
                      maxLength: 16
                      description: |
                        ZIP or other postal code customer's billing address.
                      example: W5 9HR
                    country:
                      type: string
                      maxLength: 3
                      description: |
                        The country of the customer's billing address. ISO 3166-1 numeric three-digit country code. For example, US = 840.
                      example: '826'
                card:
                  $ref: '#/components/schemas/Card'
                paypal:
                  required:
                    - TransactionID
                    - SecureMerchantAccountID
                    - PayPalAccountID
                  type: object
                  description: |
                    Paypal Details. Appear if ```"payment_option" = "paypal"```
                  properties:
                    TransactionID:
                      type: string
                      maxLength: 50
                      description: |
                        Transaction ID defined by Paypal
                      example: 0F513533U4356815L
                    SecureMerchantAccountID:
                      type: string
                      maxLength: 50
                      description: |
                        Secure Merchant Account ID defined by Paypal
                      example: XXXXXXXXXXXXX
                    PayPalAccountID:
                      type: string
                      maxLength: 100
                      description: |
                        PayPal Account ID defined by Paypal
                      example: testmerchant9999@exmaple.com
            direct_payment:
              required:
                - payment_option
                - token
                - card
              type: object
              description: |
                Appear if the payment is processed by Direct Payment.
              properties:
                payment_option:
                  type: string
                  maxLength: 10
                  description: |
                    Payment Option

                    Possible Value | Definition
                    ---|---
                    applepay | Apple Pay
                    googlepay | Google Pay
                  example: applepay
                  enum:
                    - applepay
                    - googlepay
                token:
                  type: string
                  maxLength: 1000
                  description: |
                    Payment Token from Apple Pay or Google Pay
                  example: |
                    {\&quot;signature\&quot;:\&quot;MEUCIQDfv...lyQ=\&quot;,\&quot;protocolVersion\&quot;:\&quot;ECv1\&quot;,\&quot;signedMessage\&quot;:\&quot;{\&quot;encryptedMessage\&quot;:\&quot;z3Md/3hfO9Tc...gUKE+UBAjndBJE\u003d\&quot;,\&quot;ephemeralPublicKey\&quot;:\&quot;BOsyrVGc...hkTA\u003d\&quot;,\&quot;tag\&quot;:\&quot;HTaCT...A6mHJDs\u003d\&quot;}\&quot;}
                card:
                  $ref: '#/components/schemas/Card'
        metadata:
          type: object
          description: |
            Key-value pair that can be used to store additional information about the entity.
            
            ***maxLength: 512***
            
            ***maxItem: 20***
            
            ***example:***
            ```
            "metadata": {
              "customer_id": "12345",
              "customer_comment": "engrave customer's name on product",
              "key_3": "value_3",
              "key_4": "value_4"
            }
            ```
        refunds:
          type: array
          description: |
            List of all Refunds linked with this Payment, appear if query parameter ```$expand=refund``` is opted in.
          items:
            $ref: '#/components/schemas/Refund'
        links:
          type: array
          description: |
            List of all related resources. If query parameter ```$expand=refund``` is opted out, refunds will be related here in HAL format.
          items:
            $ref: '#/components/schemas/HAL'
    RefundInput:
      type: object
      required:
        - amount
        - currency
      description: | 
        These input fields are the subset and for creating an ```Refund``` entity. 
      properties:
        amount:
          type: integer
          minimum: 1
          maximum: 9999999999
          description: |
            Refund Amount

            * Format: Eliminate punctuation and sign, support 2 decimal places according to ISO 4217, e.g. £10.50 = 1050
          example: 1000
        currency:
          type: string
          maxLength: 3
          description: |
            Refund Currency
          example: GBP
          enum:
            - GBP
            - EUR
            - USD
        metadata:
          type: object
          description: |
            Key-value pair that can be used to store additional information about the entity.
            
            ***maxLength: 512***
            
            ***maxItem: 20***
            
            ***example:***
            ```
            "metadata": {
              "return_reason": "product is damaged",
              "key_2": "value_2",
              "key_3": "value_3"
            }
            ```    
    RefundOutput:
      type: object
      required:
        - system
        - response
      properties:
        system:
          $ref: '#/components/schemas/System'
        response:
          required:
            - refund
          type: object
          description: |
            Response message payload
          properties:
            refund:
              $ref: '#/components/schemas/Refund'
            links:
              type: array
              description: |
                List of all related resources.
              items:
                $ref: '#/components/schemas/HAL'
              example:
                - href: /payment/@payment_id
                  id:
                    order_id: '14627849160897986'
                  rel: payment
                  method: GET
                - href: /orders/@order_id
                  id:
                    order_id: ORDER-1234QWER
                  rel: order
                  method: GET
    Refund:
      required:
        - id
        - pasref
        - created_at
        - last_modified
        - amount
        - currency
        - status
      type: object
      properties:
        id:
          type: string
          maxLength: 50
          description: |
            Unique Entity ID of a Refund, identical to ```pasref```
          example: '16219383951512048'
        pasref:
          type: string
          maxLength: 50
          description: |
            Refund Reference. A unique reference generated by Payment Gateway
          example: '16219383951512048'
        created_at:
          type: string
          maxLength: 20
          format: date-time
          description: |
            Created Time of the refund
          example: '2021-06-11T14:10:25Z'
        last_modified:
          type: string
          maxLength: 20
          format: date-time
          description: |
            Last Modified Time of the refund
          example: '2021-06-12T14:10:25Z'
        amount:
          type: integer
          minimum: 1
          maximum: 9999999999
          description: |
            Refund Amount

            * Format: Eliminate punctuation and sign, support 2 decimal places according to ISO 4217, e.g. £10.50 = 1050
          example: 1000
        currency:
          type: string
          maxLength: 3
          description: |
            Refund Currency
          example: GBP
          enum:
            - GBP
            - EUR
            - USD
        status:
          type: string
          maxLength: 50
          description: |
            Refund Status
            
            Possible Value | Definition
            ---|---
            batched | The transaction has been batched and sent for settlement, can no longer be voided. Applies to both refunds and sales.
            pending | The transaction has been successfully processed and is awaiting batching (midnight cutoff). Can still be voided prior to batching. Applies to both refunds and sales.
          example: pending
          enum:
            - batched
            - pending
        metadata:
          type: object
          description: |
            Key-value pair that can be used to store additional information about the entity.
            
            ***maxLength: 512***
            
            ***maxItem: 20***
            
            ***example:***
            ```
            "metadata": {
              "return_reason": "product is damaged",
              "key_2": "value_2",
              "key_3": "value_3"
            }
            ```
        links:
          type: array
          description: |
            List of all related resources.
          items:
            $ref: '#/components/schemas/HAL'    
    Item:
      required:
        - product_name
        - product_id
        - unitAmt
        - unit
        - vat
        - subAmt
      type: object
      properties:
        product_name:
          type: string
          maxLength: 200
          description: |
            Product Item Name / Description
          example: Product Item 1
        product_id:
          type: string
          maxLength: 50
          description: |
            Product Number / ID
          example: A
        unitAmt:
          type: integer
          minimum: 100
          maximum: 99999999999
          description: |
            Unit Amount of each item

            * Do not use comma or dot. For example: Input ```10000``` instead of ```100.00```
          example: 900
        unit:
          type: integer
          minimum: 1
          maximum: 9999
          description: |
            No. of Unit 
          example: 1
        vat:
          type: integer
          minimum: 0
          maximum: 999999999
          description: |
            Total VAT Tax Amount for all units

            * Do not use comma or dot. For example: Input ```10000``` instead of ```100.00```
          example: 100
        subAmt:
          type: integer
          minimum: 100
          maximum: 999999999
          description: |
            The Sum of one particular item with mulitple orders plus VAT.
            
            * For example, ```unitAmt x unit + vat = subAmt```.
            * Do not use comma or dot. For example: Input ```10000``` instead of ```100.00```
          example: 1000
    Card:
      required:
        - brand
        - authcode
        - mcn
        - cvv_result
        - dcc
      type: object
      description: |
        Card Details.
      properties:
        brand:
          type: string
          maxLength: 50
          description: |
            Indicates the card brand that issued the card
          example: VISA
          enum:
            - VISA
            - MASTERCARD
            - AMEX
            - DINERS
            - DISCOVER
            - JCB
            - CUP
        authcode:
          type: string
          maxLength: 50
          description: The authorization code generated when the card is successfully authorized
          example: '12345'
        mcn:
          type: string
          maxLength: 16
          description: |
            Masked card number
          example: 401200******1112
        cvv_result:
          type: string
          maxLength: 50
          description: |
            The result of the CVV check
          example: MATCHED
          enum:
            - MATCHED
            - NOT_MATCHED
            - NOT_CHECKED
        dcc:
          required:
            - amount
            - currency
            - ccp
            - fx_rate
            - margin_percentage
          type: object
          description: |
            Dynamic currency conversion (DCC). Return ```null``` if the card payment is not a DCC payment.
          properties:
            amount:
              type: integer
              minimum: 1
              maximum: 9999999999
              description: |
                Card Holder Amount

                * Format: Eliminate punctuation and sign, support 2 decimal places according to ISO 4217, e.g. £10.50 = 1050
              example: 1324
            currency:
              type: string
              maxLength: 3
              description: |
                Card Holder Currency
              example: USD
              enum:
                - GBP
                - EUR
                - USD
            ccp:
              type: string
              maxLength: 50
              description: The name of the Currency Conversion Processor (CCP) the request is to be sent to
              example: FEXCO
              enum:
                - FEXCO
                - EUROCONEX
            fx_rate:
              type: number
              format: double
              description: |
                Exchange rate. In this example, 1 GBP = 1.3244 USD
              example: 1.3244
            margin_percentage:
              type: number
              format: double
              description: Margin Percentage. The foreign exchange markup in relation to the ECB Daily Rate
              example: 3.75
    HAL:
      required:
        - href
        - id
        - rel
        - method
      type: object
      description: Hypertext Application Language (HAL) is an Open API standard convention for defining hypermedia such as links to related resources within JSON or XML code
      properties:
        href:
          type: string
          maxLength: 100
          description: |
            URL of the related resource
          example: /entity/@entity_id
        id:
          type: object
          description: |
            May have mulitple Entity IDs depends on the URL pattern
          properties:
            id_name:
              type: string
              maxLength: 100
              description: |
                Enitiy ID used in the URL
              example: entity-111222333
        rel:
          type: string
          maxLength: 100
          description: |
            Relation of the Resource
          example: EntityName
        method:
          type: string
          maxLength: 100
          description: |
            HTTP Method
          example: GET
          enum:
            - GET
            - POST
            - PATCH
            - DELETE
    Exception:
      type: object
      required:
        - system
      properties:
        system:
          $ref: '#/components/schemas/System'
        response:
          required:
            - request_result
          type: object
          description: Return if the exception is taken place in any downstream system
          properties:
            request_result:
              required:
                - api_gateway
                - payment_gateway
              type: object
              description: |
                Request Result
              properties:
                api_gateway:
                  required:
                    - code
                    - message
                  type: object
                  description: |
                    Result returned by API Gateway
                  properties:
                    code:
                      type: string
                      maxLength: 50
                      description: |
                        Result code
                      example: '999999'
                    message:
                      type: string
                      maxLength: 100
                      description: |
                        Result message
                      example: System Error
                payment_gateway:
                  required:
                    - code
                    - message
                  type: object
                  description: |
                    Result returned by Payment Gateway
                  properties:
                    code:
                      type: string
                      maxLength: 50
                      description: |
                        Result code
                      example: '101'
                    message:
                      type: string
                      maxLength: 100
                      description: |
                        Result message
                      example: Declined by Bank
    System:
      required:
        - messageId
        - returnCode
        - returnReason
        - sentTime
        - responseTime
      type: object
      description: |
        System-generated API gateway information by HSBC API gateway
      properties:
        messageId:
          type: string
          maxLength: 36
          description: System generated unique message ID only for HSBC internal reference
            use
          example: 89817674-daOO-4883
        returnCode:
          type: string
          maxLength: 3
          description: >
            System Return Code. 

            * This checking is on API Operational level, in other words, it
            checks upon Authorization, Connectivity and JSON Message Structure.


            Possible Value | Definition

            ---|---

            200 | Successful operation

            400 | Bad Request (With detail message in field `returnReason`)

            500 | Internal Error. Notices: Faster Payment System is a
            multiple-tiers system, system down or unavailable of any single
            dependent system (or tier) across the entire FPS pipeline can return
            HTTP Return Code `500` with different `returnReason`. Furthermore,
            if one tier which comes before the API Cloud Foundry is unavailable,
            such as the API Gateway, there will be even no json message
            returned. Developer is suggested to catch the native HTTP Return
            Code before trying to look into the `returnCode` in json message.
          example: '200'
        returnReason:
          type: string
          maxLength: 200
          description: >
            Corresponding Text message of returnCode


            Corr. Return Code | Return Message Sample | Definition

            ---|---|---

            200 | Successful operation | A successful API operation in terms of
            Authorization, Connectivity and valid JSON Message Structure. Any
            checking failure on Business Logic level will be still considered a
            successful API operation yet the Business Logic checking result will
            be returned in `response` object.

            400 | Client ID - Merchant ID mapping is not correct/updated! | The
            binding of Client ID, Merchant ID and Merchant Public Certificate is
            incorrect or not up-to-date.

            400 | object has missing required properties [field name] | Fail to
            pass JSON Field Mandatory Check.

            400 | instance type [data type] does not match any allowed primitive
            type | Fail to pass JSON Field Type Check.

            400 | string [field value] is too long | Fail to pass JSON Field Max
            Length Check

            400 | instance failed to match at least one required schema among
            [no. of conditional field] | Fail to pass JSON Conditional Field
            Check.

            500 | java.net.ConnectException: Connection refused: connect |
            Notices: Message can be varied depended on the corresponding
            dependent system which returns this message. Yet, all reasons can be
            concluded into System Unavailable.
          example: RETURN_MESSAGE
        sentTime:
          type: string
          maxLength: 27
          description: Time of request received by HSBC system from client, only for HSBC
            internal reference use
          example: '2016-11-15T10:00:00.000Z'
        responseTime:
          type: string
          maxLength: 27
          description: Time of HSBC system provides response to client, only for HSBC
            internal reference use
          example: '2016-11-15T10:00:00.000Z'
    Callback:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          maxLength: 30
          description: Return Message
          example: SUCCESS